from socket import *
from threading import Thread, Timer
from base64 import b64encode, b64decode
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
import json
from pygments import highlight, lexers, formatters
import datetime
from time import sleep
import sys
import os
from pynq import Overlay

import pynq.lib.dma
from pynq import DefaultIP
from pynq import allocate
import numpy as np
from struct import unpack, pack
import time
from math import exp

#### ML Portion: Delete after use ####
weights0 = [
[0.3639, -0.2254, -0.3022, -0.0845, 0.7483, -0.6496, -0.1135, -0.2051, 0.7455, 0.6644, 0.9839, -0.5845, 0.2835, 0.072, 0.1889, 0.8347, 0.6025, -0.0802, 0.1629, 0.058, -0.2415, 0.2688, 0.3279, -0.291, 0.7914, -0.1344, 0.173, 0.5986, -0.0244, 0.3693, 0.4336, 0.1386, 0.4865, 0.5217, 0.1936, 0.0253, -0.2884, 0.0962, 0.0159, 0.8403, -0.6145, 0.1133, 0.1144, 0.2245, -0.0199, 0.0618, -0.254, 0.1313, 0.0595, -0.1866, -0.1417, -0.0613, -0.0392, -0.1063, 0.0047, -0.1509, 0.8634, 0.2048, 0.1752, -0.246],
[0.5903, -0.0858, -0.1808, -0.1941, 0.2452, -0.0721, -0.0208, -0.1391, 0.4949, -0.4594, -0.0251, -0.0782, -0.2204, 0.0809, -0.0768, 0.2681, 0.0589, 0.1079, -0.6856, 0.2374, -0.1026, 1.142, -0.4504, 0.2477, 0.3843, -0.3309, 0.4464, 0.0733, -0.5288, 0.174, 0.2748, -0.4183, 0.0145, -0.0518, 0.2567, -0.652, 0.2602, 0.5311, 0.1233, -0.173, -0.5924, 0.5421, -0.1364, 0.2377, 0.6517, 0.1821, 0.8386, 0.2936, -0.1629, -0.0744, -0.2827, 0.2876, -0.0672, -0.2522, 0.7393, -0.0652, 0.482, 0.162, -0.1901, -0.5678],
[0.1288, -0.3118, -0.1256, -0.191, -0.2203, 0.2524, 0.0828, -0.0019, 0.271, 0.1494, 0.3145, -0.2704, -0.0048, 0.0478, -0.1141, 0.1506, 0.0767, -0.0353, -0.1411, -0.0683, 0.0791, 0.2877, 0.3733, -0.045, -0.1515, 0.483, 0.1392, 0.0988, 0.0178, -0.0715, 0.0534, -0.2485, -0.0357, 0.0358, 0.182, 0.4512, -0.3011, 0.1318, -0.0529, -0.0594, 0.3943, 0.1865, 0.2686, 0.2346, 0.3599, 0.1918, -0.0964, -0.1134, -0.0206, -0.1284, -0.343, 0.11, -0.039, -0.1342, 0.155, -0.1049, 0.0174, 0.0966, -0.1048, 0.2111],
[-0.1726, -0.2746, -0.1755, 0.066, 0.3431, 0.0375, -0.1137, 0.1288, 0.7408, 0.1597, 0.2154, -0.0391, 0.4464, 0.2051, -0.0032, 0.2992, 0.0322, -0.0515, -0.2718, -0.2722, 0.3724, 0.9355, -0.2411, -0.1056, 0.3129, 0.2567, 0.349, 0.3893, 0.1265, -0.0224, 0.4143, -0.5723, 0.0811, 0.4127, -0.0449, -0.4756, -0.513, -0.1845, -0.1168, -0.6039, -0.4046, 1.033, -0.007, -0.0403, -0.4873, 0.4174, -0.4375, 0.5103, -0.0919, 0.2213, 0.0354, 0.0825, -0.3655, -0.1661, 0.3927, 0.0479, 0.4569, 0.1204, 0.3067, 0.4326],
[0.3097, 0.0048, 0.2249, 0.0238, -0.0081, 0.4112, -0.1558, 0.5331, -0.2239, 0.4662, -0.1188, 0.3682, -0.003, 0.5732, -0.2283, -0.4937, 0.3611, 0.056, -0.449, 0.0108, -0.1705, 0.4392, 0.0327, -0.1397, -0.266, 0.0179, 0.6141, 0.4445, -0.1825, -0.152, -0.2847, 0.174, 0.2788, 0.3582, 0.0444, -0.1146, 0.4773, -0.1102, -0.0847, -0.3519, 0.0377, 0.5469, 0.1125, 0.0876, 0.1997, 0.2846, 0.0421, 0.0243, 0.1585, 0.3356, -0.413, -0.0294, 0.1704, 0.2488, 0.6142, 0.1077, 0.0165, 0.2593, 0.108, -0.0357],
[-0.3949, 0.1456, -0.0093, 0.3404, 0.048, -0.1762, -0.2728, -0.062, 0.2136, -0.0382, 0.3904, -0.4121, 0.0009, 0.1227, 0.2262, -0.3181, -0.1413, 0.4433, -0.1584, -0.0319, -0.1568, -0.0165, -0.1706, -0.0516, -0.5018, -0.4293, -0.0311, -0.3773, 0.209, -0.1256, 0.0423, 0.0954, -0.5582, 0.1663, -0.0256, -0.1037, -0.1517, -0.1545, -0.0132, 0.0935, -0.3557, 0.0242, -0.0311, 0.2798, 0.1351, -0.3243, 0.0349, 0.0329, 0.304, 0.3158, -0.054, -0.2986, -0.1009, -0.3103, -0.0505, 0.4697, 0.1557, 0.1487, -0.0109, 0.3125],
[0.1465, -0.1883, -0.0357, -0.1932, 0.6591, -0.7633, -0.095, -0.0375, 0.2553, 0.2877, 1.1971, -0.4101, 0.0347, 0.2996, 0.1511, 0.5457, 0.5577, -0.2021, 0.3433, -0.1416, -0.2143, 0.2483, 0.0231, -0.1729, 0.5847, 0.1076, 0.0438, 0.5476, -0.202, -0.2136, 0.3445, 0.5986, 0.5608, 0.6069, 0.0161, -0.1919, -0.4045, 0.0189, -0.3122, 0.6124, -0.1487, -0.0609, 0.1645, 0.2844, -0.0752, 0.2214, -0.1115, 0.1949, 0.2766, 0.1813, -0.1433, -0.4206, -0.4053, -0.0293, -0.1855, 0.1964, 0.7425, 0.2142, 0.3849, -0.4989],
[0.1898, 0.1092, -0.0323, 0.1885, -0.0733, 0.0869, 0.0426, -0.0447, -0.0808, -0.1812, -0.0728, -0.0112, -0.0125, 0.5315, 0.0976, -0.2478, 0.2382, -0.0799, -0.3593, 0.3328, -0.2735, 0.9233, -0.4188, 0.2142, -0.3114, -0.5721, 0.5148, 0.3223, -0.5495, -0.0978, -0.1738, -0.2058, 0.036, 0.4593, 0.299, -0.8009, 0.1327, 0.205, 0.0274, 0.0383, -0.0352, 0.1381, -0.153, 0.2485, 0.6442, -0.2099, 0.7, -0.1913, 0.0654, 0.2321, -0.1748, 0.2602, -0.2735, -0.2255, 0.8867, 0.0126, 0.4574, 0.302, -0.2667, -0.4834],
[0.1026, -0.1099, -0.2856, 0.0247, 0.0032, 0.0396, 0.1294, 0.1959, 0.018, 0.3642, 0.2995, -0.2911, 0.1933, -0.1194, -0.0371, -0.0474, 0.236, 0.1994, -0.1616, 0.0845, -0.0276, 0.0297, 0.1923, 0.1751, -0.0959, 0.1027, 0.2202, 0.2703, 0.234, 0.1349, -0.119, -0.1564, -0.1624, 0.0195, -0.1725, 0.3305, -0.3742, 0.1159, 0.0349, -0.5059, 0.0186, 0.0042, 0.3143, 0.346, -0.0418, 0.0134, -0.0024, -0.1192, 0.095, -0.0437, -0.4143, 0.3774, 0.0599, -0.2829, -0.3411, 0.2247, 0.349, -0.1396, 0.005, -0.0948],
[0.017, -0.1875, -0.138, 0.0158, 0.0204, -0.1097, 0.4024, 0.236, 0.3052, 0.2052, 0.3315, -0.1328, 0.5189, 0.0778, 0.0521, 0.1589, 0.0466, 0.2563, -0.1759, 0.0794, 0.3971, 0.8341, -0.1315, 0.1559, 0.1708, -0.1234, -0.1412, 0.1837, 0.2114, 0.2093, 0.4999, -0.4136, 0.0878, 0.31, -0.2469, -0.0361, -0.4443, -0.3311, 0.0434, 0.0388, -0.7563, 0.9496, -0.0764, -0.3215, -0.3088, 0.1491, -0.5116, 0.2737, 0.1314, -0.0217, -0.4041, -0.0763, -0.0196, -0.1315, 0.3567, 0.1056, 0.4619, -0.0609, -0.0211, 0.2845],
[0.2971, -0.0677, 0.1801, 0.2097, -0.0941, -0.0589, -0.0596, 0.4286, -0.2639, 0.1389, 0.1721, 0.2376, 0.4066, 0.3237, -0.0319, -0.0803, 0.1345, 0.3017, -0.3895, -0.0725, 0.0196, 0.6911, 0.0625, 0.1269, 0.2207, 0.0653, 0.1096, -0.0747, 0.0372, 0.1415, -0.0293, -0.0699, 0.0282, 0.4131, 0.1196, -0.2071, 0.5204, -0.1964, 0.072, 0.3495, -0.2223, -0.1568, 0.2279, -0.3569, 0.1247, -0.0943, 0.1222, -0.0107, 0.1095, 0.0436, -0.4426, -0.1063, -0.1479, 0.0646, 0.2648, 0.1437, -0.2426, -0.1975, 0.2221, 0.1675],
[-0.4763, 0.0201, -0.2214, 0.1933, 0.0304, -0.0606, -0.2797, 0.0488, 0.0054, 0.0309, 0.5265, -0.3626, 0.0695, 0.1705, 0.0854, -0.2543, 0.0861, 0.2418, 0.0892, 0.0619, 0.0465, 0.2149, -0.2403, 0.0582, -0.3948, -0.1014, 0.0152, -0.2674, 0.0219, 0.1456, 0.077, -0.0203, -0.5384, 0.4002, 0.1429, 0.0587, -0.1545, 0.075, 0.2632, 0.0046, -0.1402, 0.1918, 0.0663, 0.1164, -0.0199, 0.0177, 0.1758, -0.2316, 0.2034, 0.3227, 0.1546, -0.0728, 0.0654, 0.0019, -0.1046, 0.2027, -0.2228, 0.1138, 0.1283, 0.2826],
[0.2465, -0.1204, -0.0459, -0.1315, 0.6771, -0.7168, 0.0897, 0.0421, 0.5239, 0.4789, 1.3105, -0.4063, 0.3486, 0.1241, 0.0126, 0.7957, 0.2257, -0.2066, -0.0539, -0.1001, -0.313, 0.1418, -0.0366, -0.2922, 0.4287, -0.1372, -0.0265, 0.5684, -0.0644, 0.2256, 0.2762, 0.6553, 0.2382, 0.6528, -0.0005, -0.2211, -0.1266, -0.0058, -0.2128, 0.4142, 0.0581, 0.1038, 0.0745, 0.3733, -0.2246, 0.1286, -0.097, 0.1373, -0.06, -0.0144, -0.1185, -0.5364, -0.1943, 0.0567, -0.4977, 0.0568, 0.6252, 0.1223, 0.4432, -0.1036],
[0.5982, 0.2268, 0.0189, 0.1513, 0.3014, -0.1335, -0.1066, -0.6756, 0.2112, 0.1496, -0.3008, -0.3287, -0.1913, -0.1203, 0.2226, 0.0427, 0.0259, -0.1268, -0.0247, 0.2459, 0.2715, 0.6978, -0.5539, 0.353, -0.0162, -0.2741, 0.2345, 0.2704, -0.6217, -0.0536, 0.0925, -0.2413, 0.0956, 0.1153, -0.0934, -0.1307, -0.3498, 0.6302, 0.1607, 0.1493, -0.3984, 0.203, 0.1192, -0.1414, 0.5659, -0.422, 0.6936, -0.1234, 0.1111, -0.0929, -0.3177, 0.2875, -0.2671, -0.3495, 0.4278, 0.1527, 0.0843, 0.2609, -0.4077, -0.8158],
[0.0536, -0.007, 0.0654, 0.0634, -0.1778, -0.0193, -0.0227, -0.0457, -0.1592, 0.018, 0.1762, -0.1708, 0.0957, 0.1714, -0.028, -0.2544, 0.0178, 0.1178, -0.2488, 0.1899, -0.0988, 0.1117, 0.4661, -0.1774, 0.0166, 0.0274, 0.2435, -0.0216, -0.0893, 0.0284, -0.2206, -0.1833, -0.0333, 0.0544, 0.1015, 0.6374, -0.1189, -0.0635, 0.143, -0.1056, 0.1066, 0.0519, 0.3751, 0.0547, 0.2322, -0.1202, -0.2166, 0.0148, 0.0509, -0.0145, -0.3946, -0.03, 0.0374, -0.1607, -0.3205, -0.0493, 0.2933, -0.159, -0.0072, -0.1983],
[-0.0196, -0.0264, -0.1209, 0.1366, -0.1254, -0.524, 0.0213, 0.4496, 0.171, -0.0259, 0.3157, 0.0418, 0.5212, -0.3855, 0.0599, 0.0896, -0.0889, 0.2505, 0.2595, -0.1525, 0.4601, 0.5282, -0.1157, -0.0551, 0.157, -0.1429, -0.0511, 0.2357, 0.3233, 0.001, 0.4315, -0.2012, -0.4324, -0.1226, -0.1334, -0.261, -0.4545, -0.1044, 0.0104, 0.0341, -0.3151, 0.6219, 0.0834, -0.0095, -0.3346, 0.1365, -0.4495, 0.4823, 0.1901, 0.2046, -0.2853, -0.3193, -0.1047, 0.054, 0.0027, 0.0547, 0.5694, 0.2905, 0.0592, 0.3947],
[0.0801, 0.0569, -0.0309, -0.058, 0.0522, 0.1333, -0.0761, 0.4129, -0.1533, 0.2491, 0.1439, 0.3896, 0.241, 0.1537, 0.2806, 0.0313, 0.2088, 0.1978, -0.4529, 0.2239, -0.0196, 0.6722, 0.0729, 0.088, 0.0797, 0.0183, 0.1115, 0.2864, -0.1665, -0.1044, -0.0229, 0.2425, 0.1588, 0.353, 0.0948, 0.0494, -0.0032, -0.143, 0.1857, -0.4206, 0.2276, -0.0001, 0.1639, -0.4246, 0.4621, -0.0531, 0.0446, 0.2447, -0.2017, -0.137, -0.8403, 0.116, 0.434, 0.2836, 0.5372, -0.2407, 0.3554, -0.1081, 0.1777, 0.256],
[-0.5651, 0.3936, -0.1003, 0.0318, 0.049, -0.1823, -0.3841, 0.066, 0.1689, -0.1647, -0.0243, -0.242, 0.2595, 0.2055, 0.0402, -0.2165, -0.0455, 0.2451, -0.0961, 0.0783, 0.0302, 0.4199, -0.059, -0.0194, -0.5058, -0.0525, 0.2397, -0.1362, 0.377, -0.1289, -0.181, 0.1469, -0.1439, 0.2777, 0.1348, -0.278, -0.2571, 0.0326, 0.223, 0.2532, -0.1873, 0.1609, -0.0501, -0.1426, 0.2099, 0.1656, 0.044, -0.0552, 0.0682, 0.1557, 0.137, -0.2203, 0.0856, -0.0211, -0.189, 0.1209, -0.3448, -0.0828, 0.0519, 0.389],
[0.3858, 0.0182, 0.1735, -0.0219, 0.5997, -0.8115, 0.0919, -0.1179, 0.1649, 0.2509, 0.9151, -0.0762, 0.0336, 0.1361, 0.0318, 0.6746, 0.1632, -0.2262, 0.256, -0.0554, -0.2236, 0.1072, -0.0569, 0.042, 0.4817, 0.1979, 0.1132, 0.5367, -0.2895, 0.2002, 0.0913, 0.6535, 0.0293, 0.3246, -0.1654, -0.1425, -0.5186, -0.1764, -0.0744, 0.993, 0.5398, 0.0947, 0.1063, 0.3291, -0.4617, -0.0389, -0.0637, 0.1038, 0.2788, 0.2023, 0.0959, -0.7425, -0.3123, 0.0949, -0.3822, 0.0461, 0.2297, 0.125, -0.1067, -0.1345],
[0.4462, 0.0627, 0.1733, -0.219, 0.1103, -0.4659, 0.1023, 0.1071, 0.4254, -0.1853, -0.4464, -0.2218, 0.1006, -0.016, 0.0055, 0.0875, -0.1273, 0.2363, -0.2387, 0.0246, -0.3844, 0.7556, -0.5327, 0.3993, 0.1303, -0.7133, 0.2659, 0.2598, -0.3715, -0.2734, 0.2856, -0.1171, 0.1853, 0.0064, 0.2284, -0.2872, 0.3356, 0.5152, 0.063, 0.3719, 0.1808, 0.4784, 0.0189, 0.3546, 0.6788, -0.0275, 0.5759, 0.0675, 0.0127, -0.0188, -0.3902, -0.1684, -0.1542, -0.3841, 0.0669, 0.1683, 0.2251, 0.2065, -0.3848, -0.4397],
[0.0238, -0.1, -0.1227, 0.0419, 0.0, -0.2409, 0.0745, 0.0487, -0.0476, -0.128, 0.1978, -0.112, 0.1283, -0.2367, 0.0309, 0.0003, 0.2808, 0.1213, -0.1631, 0.1268, 0.021, 0.0147, 0.2765, 0.1202, -0.1928, 0.0542, 0.0273, -0.0163, 0.0502, -0.0733, 0.0939, -0.0646, 0.1615, 0.0018, 0.031, 0.5617, -0.2163, 0.0182, 0.1444, 0.0263, -0.1972, 0.0468, 0.4007, -0.0502, 0.3698, -0.0402, -0.0816, 0.237, -0.0651, 0.0396, -0.3119, -0.1074, -0.2006, -0.2911, 0.075, 0.1328, 0.4069, 0.0692, -0.0702, -0.0632],
[-0.4221, -0.1832, -0.0086, 0.0908, -0.1633, -0.1768, -0.1677, -0.0491, 0.169, 0.1864, 0.0934, -0.0262, 0.2357, -0.0115, 0.1695, 0.1316, 0.2222, -0.0985, 0.1198, 0.1211, 0.3315, 0.5214, 0.1952, -0.0278, 0.2759, 0.0823, 0.0117, 0.5232, 0.2302, -0.0946, 0.4473, -0.5704, 0.0705, -0.2079, 0.0125, -0.1623, -0.5373, -0.0243, 0.2088, 0.2178, -0.3593, 0.6142, 0.473, -0.5338, -0.1426, -0.0804, -0.4832, 0.29, 0.0043, 0.0871, -0.0564, 0.0531, -0.1147, 0.0025, 0.6949, 0.2639, 0.2484, 0.1754, -0.0888, 0.0904],
[0.2749, -0.2571, -0.0626, -0.1174, -0.0848, -0.1875, 0.0081, 0.3597, 0.0032, 0.1597, 0.2441, 0.3038, 0.2049, 0.2926, 0.0752, -0.0764, 0.2888, 0.3552, -0.123, 0.086, -0.1674, 0.37, 0.0107, 0.1652, 0.1271, 0.1153, -0.0312, 0.0934, -0.1046, 0.0208, 0.0939, 0.0249, -0.0715, 0.5849, 0.2178, 0.0983, 0.1127, -0.1478, 0.1071, -0.0262, 0.3504, 0.1037, -0.1462, -0.3626, 0.2359, 0.1131, 0.3742, 0.2101, -0.2234, -0.2075, -0.4173, 0.1177, 0.4465, 0.1965, 0.311, -0.1615, 0.3056, -0.2067, 0.0817, 0.192],
[-0.5761, 0.0743, -0.051, 0.0007, -0.07, 0.0077, -0.0754, 0.1235, 0.1126, 0.2228, 0.3624, -0.055, 0.0156, 0.2798, 0.1974, 0.1176, 0.2613, 0.1526, -0.1961, 0.041, 0.019, 0.1025, -0.0844, -0.0577, -0.2939, -0.166, 0.0761, -0.1876, 0.0895, -0.0652, -0.0363, 0.0406, -0.296, 0.3092, -0.0992, -0.0317, -0.0913, 0.2952, 0.1396, 0.1585, -0.4097, 0.2875, -0.2652, -0.1983, 0.2857, -0.0535, -0.095, -0.1021, 0.2518, 0.0898, 0.0115, -0.2157, -0.0778, -0.0293, -0.0136, 0.3257, 0.0533, -0.1335, 0.1325, 0.063],
[0.0942, -0.248, 0.1686, 0.089, 0.5079, -0.6936, 0.062, -0.3276, 0.078, 0.0203, 0.7218, 0.1193, 0.1091, -0.2571, -0.0308, 0.3834, -0.0257, -0.1096, 0.2973, -0.2354, -0.3426, 0.4957, 0.0898, 0.1889, 0.1783, 0.4226, 0.2753, 0.556, -0.1827, -0.0345, 0.2588, 0.5091, 0.0119, 0.3171, 0.0187, 0.0371, -0.1338, -0.1321, -0.0302, 0.9157, 0.4055, -0.0573, 0.4323, 0.2788, -0.336, 0.1189, 0.1249, 0.1981, 0.1435, -0.0469, 0.0441, -1.0258, -0.5789, -0.171, -0.3344, -0.0308, 0.2606, -0.0339, 0.2471, -0.199],
[0.3062, -0.2409, 0.1206, -0.1025, 0.02, -0.0408, -0.1976, 0.189, 0.2554, -0.3399, 0.0484, 0.0638, 0.1433, 0.1019, 0.0192, -0.2127, -0.1717, -0.0174, -0.0622, -0.2183, -0.3566, 0.9177, -0.3413, 0.2209, 0.1233, -0.4614, 0.3171, 0.2576, -0.3935, -0.177, 0.513, -0.3217, 0.0404, 0.1333, 0.3782, -0.2922, 0.3475, 0.3346, -0.1672, 0.3363, -0.0127, 0.7754, 0.032, 0.1948, 0.6668, -0.1641, 0.8126, 0.1126, -0.1026, -0.0466, 0.0126, -0.1151, -0.0539, -0.3395, 0.2344, -0.2851, 0.5169, 0.0301, -0.3636, -0.649],
[0.0765, -0.1592, 0.2276, -0.0493, -0.036, -0.0755, 0.0374, 0.0858, 0.0368, -0.1104, 0.0387, -0.1286, -0.0819, -0.2642, 0.0815, -0.0274, -0.0745, -0.049, 0.0204, 0.2162, 0.1466, 0.115, 0.3037, 0.1557, 0.0884, -0.0991, -0.235, -0.0634, -0.1188, -0.1435, 0.1279, -0.308, 0.1715, -0.3731, 0.1378, 0.4263, -0.2992, -0.1297, 0.0193, 0.1317, 0.1633, 0.0231, 0.1952, -0.1463, -0.1741, 0.0172, -0.0662, 0.1751, -0.0248, 0.1415, -0.1982, 0.0873, -0.1372, -0.3038, -0.1681, 0.1859, -0.1661, -0.0588, 0.2924, 0.0441],
[0.0165, -0.0362, 0.2482, 0.348, 0.0962, -0.4809, -0.252, 0.2296, 0.1021, 0.0529, 0.2042, -0.1061, 0.0587, -0.1038, 0.2276, 0.2789, -0.1506, -0.0302, 0.2382, 0.2393, 0.1118, -0.0077, -0.1988, 0.1012, 0.1631, -0.1014, 0.016, 0.4766, 0.4835, 0.3288, 0.1338, -0.4379, 0.2723, -0.1312, -0.102, -0.0171, -0.3123, -0.1655, 0.3416, 0.3699, -0.1226, 0.7162, 0.2885, -0.3275, -0.3319, 0.4894, -0.4917, 0.2496, 0.3566, -0.1042, -0.2334, 0.2116, -0.384, 0.2654, 0.0647, 0.0777, 0.1634, 0.0598, -0.283, 0.0828],
[0.3997, -0.0496, 0.2509, -0.1562, 0.0354, -0.2334, 0.0548, 0.3406, 0.0183, 0.1934, 0.1887, 0.1685, 0.1886, 0.2038, 0.3222, 0.1403, 0.0653, 0.3389, -0.1994, 0.1617, -0.0134, 0.1102, -0.3132, 0.4506, 0.0408, 0.0007, -0.0529, -0.0193, 0.4299, -0.3055, -0.0445, 0.1814, 0.1858, 0.1366, -0.103, 0.1164, 0.2759, -0.1037, 0.2238, -0.0371, 0.3293, -0.1663, 0.2335, -0.552, 0.0139, 0.3049, 0.0628, 0.2109, -0.1302, 0.1712, -0.8884, 0.1134, 0.1993, 0.0348, 0.0807, 0.2384, 0.0159, -0.2148, 0.2614, 0.1027],
[-0.2679, 0.0637, -0.0299, 0.1858, -0.2074, 0.047, -0.1628, 0.108, 0.08, 0.3391, 0.2399, -0.1789, 0.1626, 0.2917, 0.2329, -0.0381, 0.0291, 0.3449, -0.1098, 0.0126, -0.2347, 0.2351, -0.1375, 0.0101, -0.1195, 0.0874, -0.1453, -0.3187, 0.1629, 0.0612, 0.1019, -0.1367, -0.28, 0.3117, 0.1343, -0.0541, -0.1748, -0.0329, 0.2308, 0.1613, -0.1912, 0.1329, -0.1989, -0.2443, 0.381, -0.0203, 0.0584, -0.0161, -0.0684, 0.0046, -0.1508, -0.2823, 0.2931, 0.0447, -0.1164, -0.0209, 0.0799, 0.0959, 0.0317, 0.1626],
[0.1829, -0.046, 0.0389, -0.0842, 0.3787, -0.7296, 0.1807, -0.1182, 0.1466, -0.2427, 0.4362, -0.3185, 0.264, 0.0715, -0.0605, 0.4525, -0.0859, 0.0261, 0.3649, 0.1337, -0.1599, 0.3013, 0.1602, 0.3383, 0.1357, 0.5327, 0.1575, 0.2496, 0.0258, 0.2818, 0.3243, 0.293, 0.2222, 0.1606, -0.1816, -0.2422, 0.1144, -0.0135, 0.0643, 0.7551, 0.5159, -0.0886, 0.1997, 0.0314, -0.3409, -0.2562, -0.0622, 0.0063, 0.1028, 0.0939, 0.053, -0.7612, -0.4086, -0.1496, -0.4745, 0.0114, 0.1796, -0.038, 0.3362, -0.1961],
[0.3534, -0.1093, -0.244, 0.082, 0.2722, -0.333, 0.2554, -0.2453, 0.5068, 0.1285, -0.0391, -0.3771, -0.1488, -0.1046, 0.2229, -0.0224, -0.2415, 0.0505, 0.0815, 0.3574, -0.2152, 0.2818, -0.5492, 0.3123, 0.1013, -0.6143, -0.2389, 0.1277, -0.4537, 0.3806, 0.5111, -0.0529, -0.2351, -0.1852, 0.137, -0.1687, -0.1659, 0.0038, 0.1208, 0.1822, 0.0732, 0.7225, -0.0358, -0.0985, 0.2241, -0.212, 0.5461, -0.2348, -0.1455, -0.2165, -0.2371, 0.1072, -0.0308, -0.1585, 0.0141, -0.2209, 0.0996, -0.2113, -0.9001, -0.4126],
[0.2705, -0.0604, 0.012, 0.1658, -0.114, 0.0594, 0.0421, -0.0935, 0.0882, -0.2697, -0.0735, -0.0891, -0.2766, -0.0258, 0.0633, -0.1886, 0.0222, -0.051, 0.0045, 0.1387, 0.0334, 0.0903, 0.189, 0.1639, -0.1093, 0.1495, 0.0938, 0.0002, -0.136, 0.0477, 0.0544, -0.0827, 0.013, -0.0105, 0.0976, 0.2449, -0.2538, 0.1223, -0.0613, 0.0426, -0.1112, 0.2049, 0.1915, -0.1972, -0.0345, 0.0144, 0.1163, 0.0588, 0.1368, 0.0349, -0.179, 0.1966, -0.0021, -0.1312, -0.036, 0.1428, -0.0596, -0.1529, 0.1911, 0.0785],
[-0.4674, 0.3028, 0.3045, 0.1682, -0.1152, -0.6221, 0.0771, 0.0422, 0.0307, 0.0594, 0.108, 0.2807, 0.0857, 0.2594, 0.0564, 0.2445, 0.0908, 0.0812, 0.1703, -0.0802, 0.2817, 0.1586, -0.2909, 0.1995, 0.4255, -0.0805, 0.1488, 0.3249, 0.5972, 0.1443, 0.014, -0.4366, 0.2542, -0.1823, -0.0596, -0.3375, -0.37, -0.1016, 0.2333, 0.0406, -0.008, 0.6925, 0.4426, -0.2335, -0.2867, 0.5568, -0.5736, 0.2234, 0.2447, 0.1638, -0.1824, -0.3055, -0.4816, 0.6474, 0.0228, 0.0351, 0.2405, 0.0119, 0.1602, 0.3518],
[0.4896, -0.0781, 0.373, 0.0056, -0.0229, 0.1414, -0.059, 0.2255, -0.144, 0.1568, 0.3745, 0.1666, -0.0488, 0.0337, -0.0539, 0.218, 0.1686, 0.3348, -0.0275, 0.2584, -0.1921, 0.1136, 0.1163, 0.2591, -0.1325, -0.4273, -0.0167, 0.0962, 0.1097, -0.0057, -0.023, -0.0584, 0.0754, 0.2347, 0.059, -0.2404, -0.151, 0.0946, 0.2212, 0.2283, 0.5047, -0.0231, 0.4498, -0.3795, 0.0285, 0.172, 0.0611, 0.0984, -0.1436, -0.0865, -0.605, -0.0134, 0.1068, 0.3692, 0.0574, 0.0785, 0.6038, -0.2918, 0.2927, 0.0299],
[-0.3291, 0.2464, -0.106, 0.0209, -0.1064, -0.0347, -0.1359, 0.0252, 0.0638, -0.0166, 0.0271, -0.1914, 0.1473, 0.2605, 0.1748, -0.0949, 0.0923, 0.438, -0.2238, 0.051, -0.1606, 0.1964, -0.0565, -0.0436, -0.2729, 0.1531, 0.2322, -0.2029, 0.3831, 0.1942, -0.1549, 0.126, -0.1013, 0.46, 0.1097, 0.0098, 0.0265, 0.1872, 0.0307, -0.1062, -0.2827, -0.0105, -0.2296, -0.4221, 0.0453, 0.1707, -0.0314, -0.0096, 0.1213, 0.2625, -0.0045, -0.2279, 0.1236, -0.1616, -0.1184, 0.2058, -0.1643, -0.0564, 0.3292, 0.3017],
[0.3205, -0.296, 0.1095, 0.0822, 0.375, -0.6399, -0.0373, -0.0587, 0.3971, -0.1762, 0.2046, -0.0495, 0.1075, -0.0194, -0.0396, 0.6796, -0.3153, -0.1805, 0.3987, 0.138, -0.1702, -0.0913, 0.3928, 0.2753, 0.2533, 0.7934, -0.0267, 0.3958, -0.3337, 0.2596, 0.5134, 0.1443, 0.1962, 0.417, -0.2975, -0.338, -0.3376, 0.0752, -0.3106, 0.815, 0.4258, -0.0888, 0.2368, 0.1888, -0.3356, 0.0591, 0.0867, 0.3145, 0.1986, 0.045, 0.0572, -0.7855, -0.4879, 0.2366, -0.3658, 0.0798, 0.1307, -0.1313, 0.3181, -0.142],
[-0.0459, -0.2687, 0.0049, -0.0502, 0.2264, -0.3122, 0.2123, -0.272, 0.4473, -0.1615, -0.4677, 0.1556, -0.0135, -0.0801, -0.1124, 0.0273, -0.4012, -0.2443, -0.0108, -0.0026, -0.2785, 0.6651, -0.4601, 0.2246, 0.2789, -0.5309, 0.2133, 0.1033, 0.0282, 0.6367, 0.2539, -0.3377, -0.0391, -0.3409, 0.3252, -0.0673, 0.2809, 0.0405, 0.0109, 0.5354, 0.2978, 0.7822, 0.0186, -0.094, 0.3207, 0.2033, 0.5381, 0.1657, 0.0535, 0.1143, -0.387, -0.1504, -0.3206, -0.0721, 0.0869, -0.0538, 0.2077, -0.1042, -0.4633, -0.015],
[-0.0225, -0.1397, 0.2396, 0.0632, 0.1598, -0.0451, 0.0471, -0.1139, -0.0012, -0.0558, -0.2537, 0.1192, -0.2631, 0.074, -0.2141, -0.2215, -0.0074, 0.0372, 0.1753, 0.0752, -0.12, -0.0048, 0.3237, -0.0777, -0.1172, -0.019, -0.0921, 0.178, -0.0197, 0.1306, -0.1256, -0.1038, -0.1043, -0.1586, 0.0286, 0.0665, 0.0323, 0.0637, 0.1898, -0.0779, -0.0653, 0.2429, 0.3168, -0.0063, -0.0795, -0.261, -0.0069, 0.019, 0.1234, 0.0782, -0.5476, 0.1131, -0.1741, 0.0256, -0.0247, 0.0525, -0.2943, 0.0702, 0.0963, -0.1972],
[-0.4251, 0.3211, 0.1496, 0.066, -0.0286, -0.2929, 0.0359, 0.2135, 0.164, 0.1609, 0.1946, -0.2425, 0.0507, 0.3577, 0.0968, 0.4775, -0.0337, 0.4614, -0.0472, 0.1836, 0.0513, 0.1106, 0.1699, 0.3995, 0.2299, -0.0775, -0.1233, 0.2342, 0.1566, -0.3938, 0.141, -0.3691, 0.075, 0.3365, 0.0594, -0.3942, -0.4895, -0.1086, 0.0485, -0.3645, 0.1917, 0.4379, 0.3473, -0.4646, 0.0318, 0.5299, -0.1535, -0.0498, -0.0531, -0.1744, -0.4328, 0.1252, -0.1656, 0.5124, -0.0186, -0.1834, 0.5174, -0.1014, 0.1476, 0.1368],
[0.263, -0.1422, 0.4227, -0.0131, -0.195, 0.1097, -0.4968, 0.114, 0.0016, 0.0336, 0.3427, 0.1663, 0.1822, -0.1913, 0.0261, -0.1567, 0.2535, 0.0882, 0.2011, 0.1364, 0.0836, -0.2278, -0.0387, 0.3615, -0.1286, -0.1603, 0.1798, 0.107, 0.3255, 0.3514, 0.114, 0.1569, -0.0673, 0.3337, 0.1118, -0.0788, -0.1033, -0.1194, 0.0462, 0.1414, 0.4689, 0.2307, 0.3783, -0.2235, 0.065, 0.2926, 0.2951, 0.4071, -0.1628, 0.0418, -0.4479, 0.2682, 0.0512, 0.3608, 0.4009, -0.1904, 0.5617, -0.1148, 0.2026, -0.0288],
[-0.0472, 0.1972, -0.2602, 0.114, 0.0942, -0.0038, -0.172, -0.1275, 0.0439, 0.2088, -0.0521, 0.1297, 0.0365, 0.1698, 0.2308, 0.0222, 0.1231, 0.3795, -0.2799, 0.1582, 0.223, 0.201, -0.1104, 0.1228, -0.2709, -0.0252, 0.0726, -0.0053, 0.1419, 0.0332, -0.0621, -0.1929, -0.0494, 0.276, 0.0716, 0.0394, -0.0412, 0.0055, 0.0873, 0.1105, -0.2407, 0.1706, 0.0066, -0.1328, 0.0094, 0.0226, 0.0045, -0.0523, 0.2322, 0.225, -0.2662, -0.4064, 0.1411, -0.185, -0.2174, 0.064, -0.342, -0.163, 0.0219, 0.0272],
[0.3528, -0.5002, 0.1881, 0.0178, 0.2015, -0.5309, -0.2132, -0.3229, 0.1697, -0.3425, 0.1537, 0.1061, 0.1388, -0.1498, 0.024, 0.5463, -0.2108, -0.1368, 0.2468, -0.1077, -0.3624, 0.0345, 0.4191, 0.4703, 0.3188, 0.9306, 0.0773, -0.0743, -0.1678, 0.3922, 0.4616, 0.2199, 0.4431, 0.4717, 0.0229, -0.2354, -0.033, 0.2298, -0.1372, 0.8377, 0.4017, 0.0234, 0.2112, 0.2074, -0.0173, 0.1358, 0.332, 0.2733, -0.034, -0.0897, 0.3111, -0.8582, -0.6388, 0.0353, -0.1761, -0.2247, 0.3559, -0.1264, 0.2043, -0.461],
[-0.261, -0.1363, 0.1418, -0.1156, 0.2324, -0.1137, 0.1222, -0.3558, 0.2099, -0.2822, -0.5824, 0.1116, -0.1924, -0.1967, 0.1784, -0.0505, -0.5445, -0.1471, 0.6349, -0.0195, -0.2737, 0.4104, -0.221, 0.0767, 0.021, -0.2513, 0.0307, 0.0339, -0.0894, 0.3306, 0.2749, -0.1576, -0.0532, -0.3606, 0.0732, 0.103, 0.146, 0.0225, 0.1493, 0.8397, 0.2421, 0.8579, 0.0102, -0.2247, 0.5143, 0.0514, 0.7476, 0.1499, -0.0835, -0.2807, -0.1068, -0.1453, -0.0536, -0.1551, -0.3408, -0.2267, 0.1966, -0.1226, -0.5418, -0.285],
[0.142, -0.128, 0.1691, -0.0176, -0.0104, -0.0097, -0.1411, -0.0517, 0.1845, 0.0305, -0.1241, -0.2628, -0.3321, -0.1279, -0.0209, 0.0785, -0.1538, 0.0435, 0.1729, 0.2222, -0.0376, -0.0152, 0.1851, 0.0695, 0.0496, 0.1795, -0.1444, 0.1148, -0.0836, 0.1898, 0.0494, -0.2679, 0.1962, -0.0333, 0.1145, 0.1734, -0.0533, 0.0255, 0.2623, 0.0657, 0.1966, 0.1735, 0.1607, -0.2365, 0.1298, 0.2669, 0.1149, 0.0038, 0.0841, 0.0569, -0.4761, 0.2325, -0.2666, 0.1794, 0.325, 0.0757, -0.1549, 0.0099, 0.2221, 0.0028],
[0.1332, 0.1093, 0.3659, -0.0928, -0.1524, -0.4346, -0.0804, 0.6706, 0.2022, 0.0371, 0.1171, -0.1869, 0.2268, 0.3014, 0.0606, 0.5315, -0.0755, 0.2343, 0.3247, 0.096, 0.026, 0.1423, -0.1069, 0.3344, 0.608, -0.044, -0.1514, 0.2879, 0.0195, -0.2366, 0.0422, -0.3004, 0.1737, 0.081, -0.0956, -0.424, -0.4724, -0.3605, -0.0769, -0.2505, 0.0539, 0.2698, 0.3195, -0.5802, -0.054, 0.8379, -0.0958, 0.0961, 0.1866, -0.3226, -0.5313, -0.1915, -0.4127, 0.8035, -0.0879, -0.2362, 0.316, 0.0097, -0.2152, 0.054],
[0.2358, 0.229, 0.4074, -0.0137, 0.0144, 0.1054, -0.1885, -0.0278, -0.1257, 0.0061, 0.1093, 0.2767, 0.2534, -0.1224, -0.0324, 0.0519, -0.0119, 0.01, 0.3449, 0.1901, -0.0236, -0.2706, 0.1321, 0.608, -0.3148, -0.3089, 0.2181, 0.2754, 0.5581, -0.0568, -0.2795, -0.0856, -0.1289, 0.1555, 0.094, 0.2526, -0.1516, 0.0046, 0.0316, 0.0376, 0.7387, -0.1339, 0.8428, -0.313, -0.3135, 0.1879, 0.0803, 0.1172, 0.1805, 0.1979, -0.249, -0.0584, 0.1387, 0.4367, -0.0459, 0.3505, 0.0787, -0.0397, 0.0673, 0.0055],
[0.0626, -0.0212, -0.3941, 0.149, 0.2338, 0.1009, 0.1236, -0.0323, -0.0395, 0.0795, -0.0992, -0.1403, 0.017, 0.232, 0.3077, 0.0479, 0.1629, 0.1219, -0.0795, 0.1643, 0.273, 0.1015, -0.0396, 0.3049, -0.2882, 0.0504, 0.1025, 0.0561, 0.048, -0.1103, -0.1099, -0.2471, 0.1037, 0.2834, 0.1717, 0.2286, -0.0388, -0.2353, -0.0506, 0.2173, -0.1242, 0.043, -0.2029, -0.2859, 0.308, 0.0949, 0.1816, 0.0277, -0.0989, 0.153, -0.0499, -0.2154, 0.3199, -0.3898, 0.0904, 0.1905, -0.0451, 0.0867, 0.3369, 0.0359],
[0.2332, -0.5028, -0.2345, -0.1729, 0.3117, -0.3909, -0.2195, -0.2354, 0.2823, -0.475, -0.1727, -0.224, -0.0384, -0.005, 0.1212, 0.5196, -0.5233, 0.1071, -0.0704, 0.273, -0.3838, 0.1454, 0.1022, 0.3619, 0.2061, 0.9368, -0.2996, 0.1843, 0.09, 0.3703, 0.4201, 0.1282, 0.4648, 0.3575, -0.2339, -0.4379, -0.1639, 0.3432, 0.1428, 0.6026, 0.3099, -0.3218, -0.0301, 0.0734, -0.152, 0.0631, 0.0718, -0.1986, 0.1993, -0.0266, 0.1066, -0.8907, -0.6039, 0.0698, -0.2072, 0.0177, -0.1449, -0.1917, 0.0588, -0.1752],
[-0.0618, 0.2147, -0.2966, 0.2342, 0.0566, -0.0001, 0.0182, -0.0865, 0.0882, -0.2166, -0.4252, 0.041, -0.209, -0.1152, 0.2701, 0.3351, -0.7809, -0.158, 0.5363, 0.4602, 0.1554, 0.0399, 0.0319, 0.1864, 0.0703, -0.1386, -0.3242, -0.036, -0.3584, 0.1477, 0.5064, -0.0137, 0.1243, -0.2964, 0.2024, -0.0718, -0.1851, -0.4162, 0.2286, 0.7244, 0.0167, 1.063, -0.0902, -0.6665, 0.1354, 0.2214, 0.48, -0.1216, -0.031, -0.3153, -0.2995, 0.1759, -0.2121, -0.0829, -0.3342, -0.1452, 0.2526, -0.2999, -0.9655, -0.4579],
[0.2568, -0.2234, -0.0434, -0.1103, -0.0007, 0.1142, 0.0069, -0.0663, -0.2466, -0.0806, -0.1794, -0.2272, -0.4778, -0.0552, 0.1454, -0.057, -0.0027, -0.0457, 0.1958, 0.1006, -0.0986, -0.1544, 0.1517, -0.0109, 0.0415, 0.0818, -0.1537, -0.0757, -0.2371, 0.021, 0.1208, -0.0995, 0.0941, 0.1061, 0.2392, -0.0773, 0.1515, -0.0669, 0.2808, 0.0036, 0.0455, 0.2443, 0.0425, 0.179, 0.1329, -0.0628, -0.229, 0.1096, 0.1363, 0.0858, -0.3708, -0.0379, -0.1132, 0.2041, 0.0367, -0.1296, -0.237, -0.1574, -0.0362, -0.2673],
[0.295, 0.2315, 0.3671, -0.2557, 0.2488, -0.4556, 0.2373, 0.3825, -0.1476, -0.1427, 0.0656, 0.1026, 0.082, 0.6365, 0.1217, 0.0734, -0.0305, -0.0551, 0.3534, 0.0811, -0.2397, 0.0493, -0.1557, 0.1916, 0.6656, 0.0864, 0.0843, 0.3975, 0.1579, -0.0862, -0.1431, 0.0338, 0.3484, 0.1798, -0.0936, -0.3169, -0.3214, -0.443, -0.1298, -0.2224, 0.127, 0.0794, 0.3641, -0.5189, -0.171, 1.0995, -0.1719, 0.1198, 0.2947, 0.0795, -0.3315, -0.2445, -0.5483, 1.0708, -0.346, -0.1132, 0.1866, 0.0239, -0.2919, 0.1052],
[0.0072, -0.0447, 0.3026, 0.0803, 0.083, -0.1303, -0.0268, 0.2439, 0.0672, -0.0792, 0.4439, -0.0142, 0.1154, -0.1446, 0.0855, 0.1844, 0.1063, -0.0193, 0.4242, 0.2529, -0.0156, -0.551, 0.1599, 0.6818, 0.1387, -0.0728, 0.3007, 0.3287, 0.4358, -0.1471, 0.2845, 0.144, -0.3315, 0.2433, 0.1358, 0.1404, -0.4103, 0.1502, -0.0099, 0.3113, 0.1512, 0.0898, 0.6019, -0.0311, -0.0648, 0.4176, 0.0997, 0.2577, 0.0774, -0.0522, -0.6469, -0.3097, -0.0108, 0.5444, -0.2092, 0.0681, 0.4162, -0.0001, -0.1883, -0.0712],
[0.1487, 0.0918, -0.2475, 0.0616, -0.1231, 0.1059, 0.1624, 0.0197, -0.0097, -0.0019, -0.2349, -0.2421, 0.1701, -0.0582, 0.2698, -0.026, -0.0579, 0.3154, -0.2858, 0.2689, 0.26, 0.1085, -0.0526, 0.3068, -0.1292, -0.0322, -0.1563, 0.064, 0.0499, -0.061, -0.3585, -0.0608, -0.0341, 0.0889, 0.0192, -0.2729, 0.0005, 0.1336, 0.0892, -0.0464, -0.3126, -0.1344, -0.0651, -0.1382, 0.2008, 0.0693, 0.109, 0.0983, 0.0271, 0.1004, 0.0799, -0.1847, -0.0349, -0.5672, 0.1222, 0.2653, -0.0071, -0.0202, 0.3065, 0.1054],
[0.2942, -0.4373, -0.0995, -0.079, 0.5088, -0.2259, -0.2386, -0.2339, 0.4325, -0.6331, -0.2507, -0.1372, 0.1647, 0.0527, 0.0843, 0.4285, -0.3329, -0.0735, -0.2205, 0.3032, -0.1788, 0.0365, 0.109, 0.3264, 0.3728, 0.8248, -0.2999, 0.046, 0.2587, -0.205, 0.3551, -0.0038, 0.6331, 0.379, -0.0968, -0.0178, -0.4424, 0.2694, 0.052, 0.5417, 0.4217, 0.0204, 0.087, 0.2327, -0.148, -0.1167, -0.0625, -0.254, -0.0337, -0.0015, 0.1586, -0.7801, -0.6186, -0.348, -0.0761, -0.0349, 0.0445, -0.0873, 0.2701, -0.1679],
[-0.1093, 0.0704, 0.0555, -0.0776, 0.1516, -0.4471, -0.5407, 0.048, 0.2011, -0.4275, -0.5491, -0.0269, -0.113, -0.4149, 0.0286, 0.0526, -0.5644, 0.2049, 0.5712, 0.2101, -0.0486, 0.4156, -0.0366, -0.4564, 0.0237, -0.2943, 0.1578, -0.0171, -0.2514, 0.4612, 0.2126, 0.1291, -0.1828, -0.667, 0.0389, -0.0154, -0.0753, -0.4264, 0.0299, 0.2147, 0.2585, 0.9734, -0.2335, -0.5419, 0.1022, 0.2628, 0.5454, 0.0886, -0.0977, 0.0027, -0.3249, -0.0405, -0.0325, 0.058, -0.5735, -0.1217, -0.048, -0.133, -0.2941, -0.3279],
[0.0517, -0.0936, 0.0355, 0.2267, -0.0927, 0.0142, -0.1539, -0.1512, -0.0576, -0.1824, -0.095, -0.0297, -0.2402, 0.0913, -0.0365, -0.147, -0.0242, 0.047, 0.2145, 0.2042, -0.0185, 0.0822, -0.0785, 0.093, 0.077, -0.002, 0.0375, 0.0524, -0.0378, 0.2071, -0.2069, 0.106, -0.2005, 0.0987, -0.0236, 0.0273, 0.1517, 0.1903, 0.1134, 0.0144, -0.0383, -0.0406, -0.0325, 0.1696, -0.1037, 0.0857, -0.1989, -0.2533, 0.0454, 0.1975, -0.3832, 0.2834, 0.0978, 0.3541, 0.061, 0.0687, -0.2098, 0.1054, 0.0705, -0.1509],
[-0.2762, 0.4719, 0.103, -0.1239, 0.4604, -0.2658, 0.9227, -0.3377, -0.1934, 0.0111, -0.1394, 0.0163, 0.0116, 0.3767, -0.065, 0.102, -0.104, -0.1066, 0.3755, -0.1206, -0.0893, -0.2279, 0.2071, 0.4166, 0.7315, 0.0876, 0.2059, 0.2408, -0.0297, 0.093, -0.1337, -0.2812, -0.0092, 0.4993, 0.0356, -0.431, -0.4147, -0.2019, 0.0871, -0.1882, 0.1116, 0.4225, 0.363, -0.4368, -0.1561, 1.1874, -0.2925, 0.1247, 0.0404, -0.0024, -0.219, -0.3328, -0.5082, 1.1527, 0.2583, -0.1744, -0.1159, -0.0252, -0.3447, 0.1483],
[0.0927, 0.0277, 0.0046, 0.0643, -0.1213, -0.1166, -0.2404, 0.3024, -0.1087, -0.1786, 0.0699, 0.2107, 0.2179, -0.0517, 0.0024, 0.0198, -0.1001, 0.0429, 0.337, 0.2521, -0.095, -1.0011, 0.1458, 0.7232, 0.2867, -0.248, 0.1519, 0.1931, 0.0324, -0.0614, 0.2067, -0.2589, -0.3115, 0.0377, -0.0597, -0.1064, -0.1304, -0.0891, 0.1519, 0.1043, 0.0071, 0.1605, 0.5467, 0.3728, -0.0857, 0.2013, 0.059, 0.2674, -0.1405, 0.0435, -0.5633, 0.0087, -0.0801, 0.4655, -0.2848, -0.1109, 0.127, -0.1817, -0.4247, -0.236],
[0.0494, 0.1161, 0.0231, 0.0959, -0.1519, 0.4239, 0.0656, -0.3181, 0.0368, -0.232, -0.3518, 0.14, 0.2211, 0.0856, -0.1264, -0.075, 0.103, 0.0453, -0.3216, -0.0423, 0.4421, 0.1478, -0.1247, 0.2258, -0.0543, 0.2285, 0.1786, 0.1204, -0.1457, -0.0225, -0.0726, -0.0513, 0.0137, 0.0505, 0.0015, 0.1317, -0.1012, 0.0609, 0.0817, 0.1906, -0.345, -0.1594, -0.0706, -0.3827, 0.0987, 0.368, 0.0029, 0.1484, 0.2067, 0.2888, 0.0612, -0.1892, -0.1634, -0.2108, 0.0822, 0.1988, -0.0814, 0.1706, 0.5033, 0.0403],
[0.2371, -0.3758, -0.037, 0.0883, 0.1353, -0.1132, -0.0839, -0.4117, 0.0621, -0.8174, -0.6062, 0.2151, 0.1418, -0.0985, 0.1498, 0.2928, -0.3289, 0.0373, 0.0459, 0.1882, -0.4251, 0.0319, 0.3635, 0.1834, 0.426, 1.1184, -0.3584, -0.0551, 0.4284, -0.8941, 0.47, 0.0531, 0.7466, 0.5706, -0.2006, 0.2119, 0.0043, 0.385, -0.1657, 0.6395, -0.042, -0.2345, 0.0983, 0.4482, -0.0176, -0.5255, -0.2004, -0.1826, -0.0049, -0.3291, 0.2482, -0.698, -0.6155, 0.2176, -0.0294, -0.3221, -0.0698, -0.0083, 0.141, -0.2004],
[0.1253, -0.5875, -0.0476, 0.1782, 0.0741, -0.1718, -0.6877, -0.4048, 0.2809, -0.1704, -0.3861, 0.019, -0.0529, 0.0323, 0.2269, -0.0677, -0.5864, -0.3633, 0.5027, 0.1088, -0.4182, -0.2727, -0.1122, -0.1464, 0.1056, -0.3059, 0.2364, -0.2136, -0.0716, 0.0195, -0.0037, -0.4236, 0.2305, -0.1319, 0.138, 0.3436, 0.2692, -0.8281, -0.3068, 0.0395, 0.5709, 1.0094, -0.1473, -0.8408, 0.0662, 0.3188, 0.0646, 0.1784, 0.0709, 0.0292, 0.0243, -0.1178, -0.0853, -0.0119, -0.4566, 0.2179, -0.1215, 0.0232, -0.4313, -0.4222],
[0.0839, -0.1927, -0.1994, 0.0554, 0.1041, 0.0141, -0.0118, -0.1, -0.003, -0.2028, -0.2171, -0.471, -0.1224, -0.1693, -0.0654, 0.2496, -0.2137, 0.129, 0.073, 0.3238, -0.0492, 0.0152, 0.1777, -0.0843, 0.0251, 0.1138, 0.0396, 0.0205, -0.1168, 0.0533, 0.0049, 0.0865, 0.1063, 0.0012, 0.2633, -0.0078, 0.0481, -0.2311, 0.3484, 0.1697, 0.1625, 0.0901, -0.013, 0.1818, -0.0919, 0.3276, -0.1536, 0.0502, -0.1054, -0.2119, -0.2359, 0.1441, 0.188, 0.4008, 0.1354, -0.152, -0.1918, -0.1031, 0.0875, -0.0308],
[-0.1905, 0.5297, -0.1309, -0.1038, 0.172, -0.4059, 0.9559, -0.1004, -0.0166, 0.1153, -0.0521, -0.2654, -0.1524, 0.3352, 0.0769, 0.3696, -0.3333, -0.1964, 0.3719, -0.0497, 0.1335, -0.3621, -0.1307, 0.0689, 0.3212, -0.3583, -0.0762, 0.2795, -0.3268, -0.1897, -0.145, -0.1698, -0.2478, 0.6739, -0.2469, 0.1741, -0.6592, 0.3039, -0.0131, -0.2419, 0.0176, 0.1473, 0.0851, -0.1499, 0.0297, 0.7254, -0.0455, -0.0488, 0.1064, -0.063, -0.1229, -0.2951, -0.1761, 0.891, -0.0815, -0.0736, -0.154, -0.0157, -0.8834, -0.0714],
[-0.1076, 0.0373, 0.0887, 0.1747, -0.3371, -0.071, 0.0106, 0.2876, 0.2167, -0.1971, 0.2417, 0.3, 0.1414, -0.0377, 0.0652, 0.0036, -0.078, 0.0992, 0.5362, 0.0542, 0.1592, -1.09, 0.1353, 0.6573, 0.2366, -0.0083, 0.3811, 0.3224, 0.4128, 0.2845, 0.1268, -0.0571, -0.1055, 0.0328, -0.023, -0.0691, 0.0292, 0.175, 0.1032, 0.217, -0.1495, 0.0436, 0.4698, 0.7242, -0.185, 0.0274, -0.1684, 0.2202, 0.068, 0.2893, -0.3869, -0.0089, -0.1926, 0.4513, 0.0655, 0.039, -0.1202, 0.1403, -0.4434, -0.2763],
[-0.0417, 0.421, -0.1088, 0.1669, 0.0932, 0.2502, 0.4453, 0.1429, -0.0981, -0.0736, -0.3035, 0.0225, -0.0143, 0.1172, 0.1139, -0.153, 0.1177, 0.0157, -0.0127, 0.155, 0.4917, 0.2476, -0.1575, -0.0299, -0.167, 0.1362, 0.0775, -0.1892, -0.0443, 0.0254, 0.0916, -0.0642, -0.0828, -0.2348, 0.2432, 0.1043, 0.1136, 0.0032, 0.1257, -0.0861, -0.3949, -0.124, -0.1607, -0.2032, 0.2508, 0.1444, 0.2419, 0.1781, -0.0109, 0.0756, 0.2292, -0.1288, 0.1098, -0.1212, 0.0767, -0.0316, -0.0349, 0.081, 0.19, -0.0648],
[0.244, 0.0227, -0.1063, 0.1015, 0.412, 0.0652, -0.068, 0.066, -0.1244, -0.9127, -0.4984, -0.0165, 0.1266, -0.1164, 0.2645, 0.4621, -0.3135, 0.0034, 0.1294, 0.1006, -0.7412, -0.2546, 0.3971, 0.2008, 0.5017, 1.1715, -0.2724, -0.0536, 0.248, -0.7982, 0.2995, -0.0953, 0.8826, 0.3531, -0.2105, 0.1564, -0.1876, 0.2544, -0.0741, 0.6788, -0.1957, -0.1049, 0.0385, 0.3614, -0.2566, -0.4866, -0.0768, -0.2315, 0.017, -0.1163, 0.3392, -0.7745, -0.5412, -0.0172, -0.0889, -0.1464, -0.0573, -0.2099, 0.0655, -0.0647],
[0.0542, -0.3927, -0.1277, 0.1405, 0.2614, -0.6541, -0.0299, -0.8671, 0.4161, -0.0069, -0.0395, 0.006, -0.3548, -0.2849, 0.294, 0.0917, -0.7528, -0.0979, 0.7524, 0.1841, 0.0541, -0.1618, 0.1256, -0.2459, 0.2424, 0.0316, 0.0411, -0.4942, 0.37, -0.4725, 0.029, -0.3192, 0.0354, -0.3226, -0.4352, 0.1552, -0.4141, -0.0858, 0.3682, 0.4574, 0.7541, 0.4629, -0.124, -1.2098, -0.2778, 0.3845, -0.1758, 0.094, -0.0934, -0.0258, -0.2, 0.134, -0.0144, -0.1851, -0.5659, -0.1025, 0.0222, -0.3594, -0.6099, -0.2061],
[0.0442, -0.2698, 0.0567, -0.0206, 0.183, 0.0589, -0.2536, -0.1689, -0.1683, -0.1765, -0.05, -0.1895, -0.2448, -0.069, -0.0447, 0.182, 0.2758, 0.2295, 0.2643, 0.0995, -0.0286, -0.0608, -0.0174, -0.0499, 0.0707, 0.0072, -0.1033, -0.086, -0.1964, -0.3179, -0.1143, 0.0375, -0.018, 0.0843, 0.0861, -0.166, -0.1777, -0.1144, 0.2312, 0.0568, 0.1524, -0.0964, -0.0295, 0.1491, 0.1157, 0.1439, -0.3885, -0.1062, -0.0107, 0.0786, -0.1313, 0.1433, 0.0465, -0.077, 0.1148, 0.0073, 0.1205, -0.0896, 0.0202, -0.0538],
[0.5544, 0.138, -0.2042, -0.2572, -0.5273, -0.2403, 0.5109, 0.5118, -0.5144, 0.1238, -0.093, -0.0194, -0.3221, 0.2741, -0.4434, 0.5158, 0.1205, -0.1475, 0.3446, -0.074, 0.4664, 0.126, -0.1744, 0.007, 0.4272, -0.0287, 0.3726, 0.2635, -1.0299, 0.1156, -0.0959, -0.2891, 0.2542, 0.4796, -0.2095, -0.3361, -0.287, 0.0746, -0.1277, -0.5321, 0.3013, 0.0866, 0.3025, 0.2366, -0.0237, 0.9076, 0.0091, 0.0704, -0.1372, 0.0213, -0.4384, -0.5749, -0.4686, 0.597, -0.2689, 0.0702, -0.4187, 0.0114, -0.5347, -0.2487],
[-0.4533, 0.1822, -0.1619, 0.1303, -0.1801, -0.1311, -0.3145, 0.0603, 0.0134, -0.1457, -0.0449, -0.0365, -0.1424, -1.1492, 0.006, -0.2198, -0.2553, -0.0171, 0.559, 0.1281, -0.3098, -0.8997, 0.1797, 0.574, 0.2957, 0.1457, 0.2796, 0.4599, 0.1958, 0.0204, -0.0892, -0.3515, -0.3747, 0.2123, -0.2175, 0.1556, 0.1734, 0.0573, -0.0071, 0.1426, -0.0825, 0.228, 0.5458, 0.7711, -0.0967, -0.04, -0.0265, 0.0764, 0.2628, 0.1378, -0.588, -0.1946, -0.406, 0.0366, -0.0951, -0.0047, 0.0974, 0.077, -0.5152, -0.2834],
[0.2828, 0.1836, -0.0907, 0.2679, -0.2008, 0.3434, 0.2482, -0.0433, 0.1164, 0.2012, -0.2098, -0.0665, -0.1339, 0.0479, 0.0253, -0.0049, -0.0167, 0.231, -0.0481, 0.1365, 0.3891, 0.3191, -0.1341, -0.001, -0.0755, 0.1965, 0.0707, 0.0488, -0.2939, -0.1757, -0.0606, 0.0067, 0.0644, -0.2511, 0.1156, -0.0768, -0.2919, -0.295, -0.1317, -0.277, -0.6331, -0.0112, -0.0335, -0.0446, -0.0735, 0.0855, 0.3575, 0.0386, 0.2787, 0.1227, 0.311, 0.0821, -0.21, -0.3998, -0.0129, 0.2434, -0.1028, 0.1832, 0.3786, 0.0466],
[0.2211, -0.2425, -0.1557, -0.0048, 0.4015, -0.0443, -0.2089, 0.0753, 0.1067, -0.9926, -0.6036, -0.0719, -0.0154, 0.0363, 0.1095, 0.3318, -0.2503, 0.1209, 0.1034, 0.1219, -0.7839, -0.1452, 0.3546, 0.2198, 0.4995, 0.8543, -0.3708, -0.0477, 0.1452, -0.4787, 0.5855, -0.0253, 1.1596, 0.0738, -0.1925, 0.2048, -0.3031, -0.048, -0.1693, 0.4732, -0.3551, -0.0306, -0.0939, 0.4594, 0.1606, -0.3672, -0.1021, -0.1753, -0.1725, -0.4528, 0.1718, -0.7833, -0.4299, 0.3219, 0.0549, -0.3126, -0.2035, -0.0768, 0.1942, 0.0984],
[0.378, -0.4452, -0.3333, -0.2259, 0.1936, -0.5614, -0.1139, -0.3708, 0.3987, -0.1377, -0.082, 0.2189, -0.1821, -0.1741, 0.0327, 0.2566, -0.7654, 0.1585, 1.0887, -0.1676, -0.0414, 0.067, 0.0712, -0.2303, 0.2277, 0.2809, 0.3685, -0.352, 0.1295, -1.0722, 0.0, -0.2892, -0.0216, -0.4577, -0.4667, 0.3862, 0.1126, 0.012, -0.0453, 0.3729, 0.4646, 0.6629, -0.3845, -1.0213, 0.171, 1.0061, 0.2211, 0.3963, -0.2723, -0.1535, 0.1613, -0.1489, 0.3576, -0.1913, -0.9698, -0.3133, -0.2708, -0.4951, -0.2075, -0.0141],
[-0.0869, 0.0152, 0.0798, -0.1468, -0.0385, 0.0239, -0.2151, -0.2788, -0.1981, -0.1699, -0.0504, -0.3683, -0.4052, 0.0199, -0.0066, -0.0918, 0.0405, 0.2311, 0.063, 0.1539, -0.0347, -0.1483, -0.3101, 0.1682, 0.0814, -0.2075, -0.0234, 0.0342, 0.1256, -0.1289, -0.0448, -0.0831, -0.2061, -0.186, 0.1746, 0.1406, 0.0214, -0.0141, 0.1194, 0.2008, 0.3793, -0.1758, -0.3136, 0.2655, -0.1071, -0.0427, -0.0111, -0.0719, -0.006, -0.1148, 0.1222, -0.0763, 0.1191, -0.1073, 0.2279, -0.1804, 0.0438, 0.0457, -0.131, 0.1545],
[0.2587, 0.0456, -0.1636, -0.2289, -0.6731, -0.2007, -0.4534, 0.5293, -0.4792, 0.0246, -0.3027, 0.0234, -0.6245, 0.2533, -0.1397, 0.1745, -0.1733, -0.0153, 0.6323, -0.1076, 0.3826, 0.1857, -0.1833, 0.2122, 0.5292, 0.1998, 0.3075, 0.1892, -0.6644, 1.4418, -0.0609, -0.2122, 0.637, 0.3638, -0.1517, -0.3981, -0.2645, -0.5239, -0.4396, -0.2978, -0.0383, 0.3652, -0.086, 0.3689, -0.2321, 0.8069, 0.0206, 0.1074, -0.2559, 0.0697, -0.1123, -0.2591, -0.55, 0.5547, -0.1541, 0.0723, -0.6302, -0.1388, -0.691, -0.1977],
[-0.4123, 0.0642, -0.4009, -0.1243, -0.3988, -0.4442, -0.0119, 0.0173, -0.1016, -0.5434, 0.2423, -0.1085, -0.1975, -1.2953, 0.1288, -0.1846, -0.5915, -0.0982, 0.8112, 0.3006, -0.1123, 0.0644, 0.1119, 0.3434, 0.4358, 0.2435, 0.03, -0.0853, -0.0401, -0.8189, 0.4816, -0.2812, -0.1292, -0.2222, 0.0199, 0.3285, 0.0343, 0.4551, 0.2827, 0.5178, -0.4244, 0.1091, 0.3004, 0.4604, 0.0564, -0.1949, -0.1345, 0.0668, 0.0287, -0.1238, -0.7545, -0.2781, -0.0297, 0.0491, -0.3527, -0.193, 0.1017, -0.3574, -0.5071, 0.0673],
[-0.0803, 0.1499, -0.0994, 0.428, -0.2639, 0.3165, 0.4351, 0.138, 0.1593, 0.0667, -0.22, -0.3105, -0.0728, 0.0803, 0.2004, 0.0548, -0.0661, -0.1194, 0.0607, 0.1192, 0.1753, 0.5362, -0.0065, 0.0085, -0.2213, 0.2334, 0.1715, 0.1848, -0.3825, 0.2547, 0.1545, -0.206, -0.0639, -0.145, 0.2022, 0.128, -0.0697, -0.1918, 0.0336, -0.1509, -0.4349, -0.0218, 0.2667, -0.403, -0.0798, 0.1753, 0.0529, 0.2069, 0.1409, 0.3271, 0.1465, 0.1716, -0.1353, -0.1247, 0.137, 0.419, -0.0957, 0.2454, 0.3587, 0.0964],
[0.2684, 0.4923, -0.346, -0.0657, 0.2532, 0.4746, 0.0672, -0.3089, 0.0825, -0.9672, -0.8127, -0.1294, 0.0341, -0.024, 0.04, 0.4635, -0.1884, -0.0178, 0.0435, 0.1652, -1.1739, -0.2446, 0.0939, -0.1564, 0.5099, 0.7519, -0.1471, 0.103, -0.1264, -0.5938, 0.5253, 0.0889, 0.9012, -0.1138, 0.0049, 0.0071, -0.2097, -0.3381, 0.297, 0.032, -0.2664, -0.1734, 0.0204, -0.0952, -0.1021, -0.1377, -0.4778, -0.092, -0.4263, -0.3432, -0.0574, -0.6633, -0.4244, 0.2392, 0.006, -0.29, -0.3438, 0.0437, 0.0591, 0.2192],
[0.5422, -0.4112, -0.3724, -0.1057, -0.1293, -0.322, -0.5509, 0.1776, -0.0469, -0.1839, -0.3751, 0.2454, -0.4168, -0.1611, -0.1422, 0.3337, -0.6926, 0.1372, 1.123, -0.3123, -0.1179, -0.0266, -0.1849, -0.1203, 0.15, 0.1385, 0.4326, -0.2802, -0.2509, -0.2546, 0.1931, -0.2294, 0.141, -0.4211, -0.4723, 0.8626, 0.0395, -0.3775, -0.585, -0.0483, 0.2521, 0.7015, -0.1701, -0.8668, 0.3635, 0.8226, 0.4444, 0.3818, -0.232, -0.4458, 0.0537, -0.2914, 0.3304, 0.0552, -1.0564, -0.5076, -0.329, -0.443, -0.4425, 0.0849],
[0.1582, -0.1512, -0.01, -0.0138, 0.0932, 0.0457, 0.061, 0.2523, 0.028, -0.2648, -0.2922, -0.2296, -0.1236, -0.0061, -0.055, 0.0857, 0.0825, 0.2655, 0.0693, 0.25, -0.1732, -0.0704, -0.4022, -0.1548, 0.0506, 0.0126, 0.0513, 0.0443, 0.165, -0.0394, -0.0466, -0.1308, -0.0549, -0.2744, 0.1336, 0.0189, 0.0798, 0.1533, 0.2343, -0.0946, 0.0811, -0.0416, -0.1897, 0.1251, -0.0583, 0.2456, -0.2446, 0.0404, -0.1354, 0.0053, 0.0781, 0.0018, 0.2584, 0.0233, 0.1943, -0.0172, -0.233, 0.0437, -0.16, -0.0993],
[-0.4596, -0.4531, -0.3285, 0.0486, 0.2591, -0.4836, -0.1204, -0.1902, -0.2206, -0.0059, -0.3478, 0.1137, -0.7531, 0.2994, -0.2354, -0.2477, -0.1689, -0.2892, 0.6405, -0.1857, 0.0253, 0.4451, -0.2131, 0.2617, 0.8775, 0.0969, 0.2315, 0.2768, 0.2505, 1.8251, -0.1285, -0.0325, 0.4183, 0.372, -0.3765, -0.0872, -0.521, -0.1826, -0.1133, -0.404, -0.3993, -0.1754, 0.1111, -0.0921, -0.1271, 0.4929, 0.0168, -0.0609, 0.0561, -0.0613, -0.2833, 0.0717, -0.6412, 0.0856, -0.4227, 0.1817, -0.6891, -0.0797, -0.3696, 0.0511],
[-0.2676, 0.1542, -0.6351, -0.0963, -0.4236, -0.6089, 0.004, 0.2027, 0.0755, -0.3235, 0.0647, 0.0649, 0.104, -1.2502, 0.3239, 0.0735, -0.2759, 0.2085, 0.884, 0.0592, -0.0693, 0.6512, -0.1028, 0.3464, 0.5269, 0.205, -0.0865, -0.2321, -0.2658, -0.9088, 0.1684, -0.163, -0.1413, -0.5815, -0.5519, 0.4333, 0.0796, 0.0106, 0.1053, 0.485, -0.8189, 0.006, -0.1348, -0.0766, -0.029, -0.2031, -0.08, 0.1876, -0.0132, -0.4344, -0.1346, -0.1074, 0.128, -0.1003, -0.4308, -0.1181, 0.1398, -0.2315, -0.516, 0.1382],
[-0.0238, 0.2379, -0.2114, 0.1723, -0.1955, 0.108, 0.3068, 0.0329, -0.2678, 0.0394, 0.0523, -0.1664, -0.0823, 0.1436, 0.2723, -0.0834, -0.1269, 0.0537, 0.1358, 0.3073, -0.1254, 0.4349, -0.175, -0.0363, -0.2662, -0.0048, -0.2042, 0.0808, -0.3238, 0.4167, 0.1637, 0.1338, 0.2136, -0.1769, -0.0916, 0.2282, -0.207, -0.1674, 0.1489, -0.0853, -0.4516, -0.0131, 0.1437, -0.4105, 0.111, 0.3232, 0.2463, 0.1074, 0.0491, 0.0768, 0.3058, 0.0253, -0.3096, -0.0733, 0.0359, 0.3751, 0.0159, 0.0448, 0.1514, 0.0366],
[0.1969, 0.4846, -0.1138, 0.2371, 0.4324, 0.6159, 0.079, -0.2825, -0.122, -0.8011, -0.73, -0.0462, -0.0215, -0.1036, 0.1503, 0.6019, -0.1555, 0.0472, 0.1977, 0.4024, -1.2074, -0.019, -0.0336, -0.1272, 0.5243, 0.605, -0.2511, 0.0558, -0.3029, -0.6352, 0.4424, -0.0705, 0.8473, -0.5233, -0.2719, -0.1034, -0.3267, -0.5608, 0.3262, -0.0326, -0.3456, -0.2781, 0.2321, 0.2171, -0.1868, -0.0974, -0.5269, -0.0921, -0.2616, -0.0887, -0.0897, -0.4011, -0.6151, 0.1479, 0.3362, -0.0499, -0.4283, -0.0668, -0.1631, -0.1671],
[-0.1693, -0.275, -0.4646, -0.0351, 0.0177, -0.2236, -0.3454, 0.2139, -0.1459, 0.0087, -0.0784, 0.0392, -0.0079, -0.3242, 0.1047, -0.333, -0.2655, 0.2427, 0.5679, -0.2033, -0.2233, -0.1137, 0.2224, -0.1597, 0.0232, 0.3797, 0.0477, -0.5145, -0.1179, 0.3577, 0.067, -0.156, -0.235, -0.5908, -0.7937, 0.5872, -0.2019, -0.6769, -0.2838, 0.3564, -0.0643, 0.2303, -0.05, -0.722, 0.1075, 0.6598, 0.2593, 0.1786, -0.3028, 0.0002, 0.6388, -0.026, 0.3455, 0.191, -0.7208, -0.219, -0.5154, -0.486, -0.3657, -0.2064],
[-0.3039, -0.1701, -0.1775, -0.1384, 0.1082, 0.2458, -0.156, 0.0172, -0.247, 0.0532, -0.0046, 0.0619, -0.3899, -0.0411, -0.0891, 0.2505, 0.2912, 0.1925, 0.4639, 0.1804, 0.0786, -0.0117, -0.2821, 0.0678, 0.0555, -0.0007, -0.0029, -0.0457, -0.1342, 0.0386, -0.1477, -0.1421, -0.1252, -0.0906, 0.0993, -0.1713, -0.1981, -0.1273, 0.0746, 0.1383, 0.0694, -0.1675, -0.1662, 0.3326, 0.2499, -0.0767, -0.2227, -0.0271, -0.13, -0.0956, 0.0767, -0.0706, 0.1041, -0.1522, 0.0777, -0.0571, 0.012, -0.1056, 0.2386, 0.1221],
[-0.3928, -0.6817, -0.3049, -0.1815, 0.9157, 0.0312, -0.2195, -0.5417, -0.0697, -0.0723, -0.0611, -0.0952, -0.3946, -0.0499, -0.1237, 0.2683, -0.1674, -0.5869, 0.6063, -0.2356, 0.0731, 0.1748, -0.2889, 0.7907, 0.636, -0.0819, 0.149, 0.037, 0.6938, -0.0768, -0.0789, -0.0103, 0.0585, 0.2651, -0.3681, -0.0239, -0.5758, 1.0895, 0.252, -0.0887, -0.0771, -0.2594, 0.0064, 0.1975, -0.0282, 0.3391, -0.0022, 0.0161, -0.1495, 0.1792, -0.2532, -0.0567, -0.2334, 0.0084, -0.3894, 0.1292, -0.5474, -0.1146, -0.3831, -0.2571],
[-0.5226, 0.1737, -0.1252, 0.1853, -0.5478, -0.4196, -0.2247, 0.1755, -0.0858, -0.5354, -0.3395, 0.2529, -0.0834, -0.9789, 0.1771, -0.4031, -0.4606, -0.1306, 0.4854, -0.001, -0.245, 0.4641, 0.0226, 0.2729, 0.118, 0.2555, -0.0662, 0.1068, -0.1888, 0.2535, 0.4729, -0.1707, 0.287, -0.8986, -0.4725, 0.206, 0.0399, -0.4945, 0.2433, 0.4494, -1.1525, 0.254, -0.0035, -0.0431, 0.0006, -0.3549, 0.0208, 0.2201, 0.082, -0.1945, -0.0149, -0.4249, -0.0035, -0.2605, -0.5415, -0.0399, -0.0221, -0.1092, -0.0947, 0.2394],
[-0.2101, 0.0595, -0.0749, 0.4194, 0.01, 0.356, 0.4489, -0.4571, -0.0545, 0.2234, 0.2413, -0.2916, -0.1346, 0.4218, 0.1313, -0.2389, 0.0187, 0.0958, 0.4102, 0.3064, 0.0017, 0.2968, 0.1364, -0.0566, 0.0524, 0.1165, -0.1254, 0.0805, -0.2339, 0.2043, -0.0405, 0.0367, -0.114, -0.046, 0.0282, 0.1922, -0.0832, 0.2087, 0.1057, 0.0855, -0.4188, 0.1895, 0.2853, -0.1854, 0.1436, 0.0024, -0.0294, 0.0833, 0.3568, 0.2839, 0.3294, -0.1167, -0.298, -0.2454, -0.0538, 0.3814, 0.0289, 0.3033, 0.0066, -0.3021],
[0.1536, 0.184, -0.2474, 0.2225, 0.0972, 0.4916, 0.0957, -0.0269, 0.1256, -0.8738, -0.9332, -0.1139, 0.2915, -0.3409, 0.2403, 0.7488, -0.3178, -0.0178, 0.2218, 0.3687, -0.8046, -0.2549, 0.1179, 0.0411, 0.6982, 0.7077, -0.2283, -0.1561, -0.5641, -0.0753, 0.6528, 0.2156, 0.734, -0.7645, -0.097, -0.1589, -0.1812, -0.5637, 0.2549, -0.5813, -0.06, -0.3574, 0.157, 0.0315, -0.293, -0.1289, -0.456, -0.0594, -0.5091, -0.0364, -0.3188, -0.4387, -0.7112, 0.1984, 0.2926, -0.2449, -0.2929, -0.001, -0.118, 0.1998],
[-0.1309, 0.2712, -0.036, 0.0701, 0.2261, -0.1801, 0.4686, -0.3731, 0.0206, -0.2955, -0.1808, 0.1447, -0.2885, 0.0596, -0.2066, -0.5308, -0.3096, 0.0037, 0.3961, -0.4233, -0.7061, 0.0525, -0.0243, -0.2305, 0.0346, 0.3937, 0.4223, -0.3886, -0.218, 0.6479, 0.2177, -0.3112, -0.3984, -0.2377, -0.7537, 0.7942, 0.0412, -0.6957, -0.0578, 0.1706, -0.189, 0.3307, -0.0653, -0.7208, 0.0193, 0.9077, 0.0254, 0.5725, -0.2141, -0.1772, 1.0736, -0.4928, 0.2358, 0.2655, -0.5747, -0.0191, -0.7051, -0.219, -0.47, -0.2238],
[-0.2833, 0.0471, 0.0167, -0.1278, -0.0813, 0.118, 0.0529, 0.0179, -0.1913, 0.1031, 0.0608, 0.1073, -0.183, 0.0843, -0.0816, 0.0222, 0.282, 0.0986, 0.0823, 0.3559, 0.0522, 0.0141, -0.4193, -0.2427, -0.1615, -0.2399, -0.1129, 0.004, -0.0598, -0.0215, 0.066, 0.0157, -0.0075, -0.0269, -0.1407, -0.1276, 0.0395, -0.1543, 0.2161, 0.0198, -0.0539, -0.3118, -0.2043, 0.2306, 0.148, 0.0957, 0.0372, -0.0683, 0.0536, -0.2114, 0.4381, 0.0912, 0.1543, -0.0707, -0.2739, -0.1799, -0.0366, -0.0862, 0.1864, -0.0026],
[0.4343, -0.2363, -0.1418, 0.0602, 0.4469, -0.5344, -0.4487, -0.2798, -0.31, -0.4674, -0.0367, -0.1332, -0.375, -0.1528, -0.2428, 0.8658, -0.1503, -0.067, 0.5673, -0.089, -0.2583, 0.5379, -0.4645, 0.7969, 0.3967, -0.0968, 0.0953, 0.0195, 0.4283, -1.3452, 0.1084, 0.1219, 0.1425, -0.0553, -0.3771, -0.4139, -0.1761, 1.5582, -0.0518, 0.5047, -0.0472, -0.2245, -0.0635, 0.1546, 0.2496, -0.1062, 0.0091, -0.214, 0.0459, 0.1173, -0.4466, -0.0864, -0.0892, -0.5366, -0.3317, 0.055, -0.4506, -0.0306, -0.0836, -0.3887],
[-0.7092, -0.0232, -0.0561, 0.1188, -0.2272, -0.5562, -0.0003, -0.1015, -0.0064, -0.5234, -0.3903, 0.0901, 0.3248, -0.8092, 0.1368, -0.4018, -0.3784, -0.2838, 0.4456, 0.0006, -0.2599, 0.3748, -0.0562, -0.1909, 0.2453, 0.0219, -0.258, 0.1926, -0.1414, 0.5553, 0.1428, -0.254, 0.206, -1.0323, -0.5541, 0.4084, 0.2649, -0.4132, 0.0634, 0.2935, -0.9347, 0.1735, -0.1041, -0.123, -0.1914, -0.248, -0.0226, 0.0427, -0.0024, 0.1486, 0.3032, -0.3718, 0.0032, -0.086, -0.4644, -0.0512, -0.0589, 0.2526, -0.1915, 0.097],
[0.0204, 0.0651, 0.0556, 0.4859, 0.3008, 0.2741, 0.1501, -0.1024, -0.1172, 0.113, -0.0424, -0.0221, 0.0907, 0.1533, 0.0981, -0.0242, 0.1638, -0.1323, 0.2639, 0.2647, -0.3332, 0.1582, -0.1722, 0.1013, 0.1805, -0.1348, 0.224, 0.3704, 0.0095, -0.2198, -0.0215, 0.1561, -0.0144, -0.1328, 0.0783, -0.1407, -0.1787, 0.1115, 0.1078, -0.0294, 0.0289, -0.1433, 0.101, 0.07, -0.0419, 0.2445, 0.179, -0.1542, 0.1764, 0.4282, 0.2035, -0.118, -0.2894, 0.0198, -0.0282, 0.4803, -0.0561, 0.3712, 0.0334, 0.0102],
[0.1905, -0.299, -0.0775, -0.1006, 0.3356, 0.5632, -0.5505, -0.0414, 0.1451, -0.5157, -1.0002, -0.3951, 0.2076, -0.1946, 0.0177, 0.4739, 0.0768, 0.1106, 0.4476, 0.2393, -0.7693, -0.1022, -0.1771, -0.0935, 0.828, 0.7758, -0.1898, -0.173, -0.4488, 0.4757, 0.5012, 0.2884, 1.0747, -0.6645, 0.0966, -0.1791, -0.2668, -0.2608, -0.0359, -0.8154, 0.039, -0.4306, 0.2565, 0.212, -0.1302, 0.0265, -0.3243, -0.0959, -0.4612, -0.091, -0.3086, 0.0369, -0.8327, 0.2535, 0.379, -0.2196, -0.2337, -0.1439, -0.0858, -0.0616],
[0.1898, 0.2188, -0.4056, -0.2631, 0.1826, 0.098, 0.8106, -0.4402, 0.1488, -0.0008, -0.2505, 0.0707, -0.1131, -0.3473, 0.0551, -0.2999, -0.1338, -0.0915, 0.277, 0.0544, -0.2878, -0.1527, -0.2156, -0.0297, -0.1652, 0.4134, 0.4405, -0.3252, 0.084, -0.224, 0.2913, -0.1409, -0.3657, -0.3861, -0.9399, 0.8202, -0.234, 0.642, 0.1471, -0.0137, -0.2594, 0.2451, 0.0666, -0.1422, 0.4273, 0.8114, 0.1089, 0.7393, -0.399, -0.2267, 0.493, -0.532, 0.7616, -0.0777, -0.716, -0.4218, -0.5942, -0.1057, -0.2414, -0.4149],
[-0.0723, -0.096, 0.002, -0.1007, -0.0649, 0.0851, 0.2113, 0.2003, 0.1852, 0.1517, -0.0446, 0.5142, -0.0422, 0.1683, 0.0641, -0.0559, 0.0353, 0.0227, 0.0184, 0.2622, -0.0103, 0.0209, -0.6345, -0.0195, 0.1921, -0.2914, 0.0544, -0.0127, 0.0483, 0.2758, 0.0524, -0.0687, -0.2424, 0.0773, 0.1114, -0.1871, 0.047, -0.2457, 0.0186, 0.0575, -0.1093, 0.1097, 0.0207, 0.113, 0.1937, -0.0657, 0.0284, 0.1954, 0.0406, 0.05, 0.4349, 0.0056, 0.1472, -0.0929, -0.0991, -0.1051, -0.2092, 0.101, 0.0704, 0.3553],
[0.57, -0.3796, -0.1956, -0.2554, -0.6469, -0.3231, -0.792, 0.7003, -0.5897, -0.1389, -0.7156, -0.1865, -0.5048, 0.4786, -0.1542, 0.776, -0.5885, 0.1622, 0.5316, 0.0214, 0.0647, 0.6907, -0.4603, 0.4529, 0.3415, -0.0883, 0.1957, 0.0762, 0.0549, -0.6542, 0.3005, -0.006, 0.4089, -0.1252, -0.7004, 0.0354, -0.4504, 0.2441, -0.3749, 0.2282, -0.0568, -0.2296, 0.0561, -0.1309, 0.3231, 0.11, 0.0813, -0.0324, 0.1808, 0.0064, -0.2535, 0.5285, -0.3346, -0.6473, -0.3575, -0.1584, -0.7215, 0.0043, -0.1067, 0.3079],
[-0.4965, 0.0659, 0.0108, 0.063, -0.1407, -0.386, 0.2224, -0.2913, -0.1248, -0.4745, 0.0944, 0.0127, 0.0522, -0.2459, -0.2156, -0.3714, -0.1174, -0.2875, 0.564, -0.057, -0.3114, 0.8365, 0.1897, -0.27, 0.1134, 0.1867, 0.1633, 0.3186, -0.3827, 0.1592, 0.1741, -0.0434, -0.0367, -0.9935, -0.3477, 0.2354, 0.1159, -0.1526, 0.2823, -0.0218, -0.5335, 0.1749, -0.026, -0.2795, -0.2533, -0.2786, 0.0483, 0.4063, -0.1576, 0.0398, 0.2482, -0.1004, 0.0036, 0.1211, -0.0778, 0.2332, -0.1903, 0.0573, -0.4177, -0.0646],
[0.2276, 0.0664, 0.0853, 0.5151, -0.0755, 0.2873, 0.2316, 0.0143, -0.0852, -0.0939, -0.3393, -0.4055, -0.3432, 0.2055, 0.105, 0.0025, 0.0074, -0.0347, 0.0931, 0.2329, -0.5051, -0.0438, 0.0294, -0.0543, -0.0349, -0.0729, 0.0142, 0.1946, -0.0874, -0.0487, -0.1333, 0.0293, 0.3222, -0.3589, -0.0123, -0.1, -0.3576, 0.1754, 0.2794, 0.0446, 0.2678, 0.195, 0.0257, -0.3245, 0.0094, 0.0489, 0.065, -0.147, 0.1076, 0.2269, -0.0031, -0.0214, -0.3653, -0.2652, 0.0305, 0.2411, -0.364, 0.3291, -0.0899, -0.0706],
[0.1916, -0.3818, -0.2824, 0.089, 0.4255, 0.6597, -0.2342, -0.2351, 0.2924, -0.1765, -1.1438, -0.3753, 0.0453, -0.1353, 0.2156, 0.7807, -0.0138, -0.0747, 0.2711, 0.2598, 0.0629, 0.014, 0.0158, -0.0551, 0.8741, 0.6577, -0.1607, -0.0717, -0.2004, 1.0117, 0.6445, 0.0785, 0.5131, -0.8035, -0.0473, -0.3332, -0.0925, -0.118, 0.1942, -1.1891, 0.0417, -0.2946, 0.0884, 0.2514, -0.4666, 0.0747, -0.3003, -0.2125, -0.2542, -0.0187, -0.5892, 0.4437, -0.8853, 0.3449, 0.7462, 0.1114, -0.1316, 0.0023, -0.1533, -0.3676],
[0.3499, 0.1191, -0.0858, -0.1264, -0.2995, 0.4998, 0.4586, 0.1699, -0.1574, 0.4144, -0.0091, -0.0097, -0.1842, 0.0396, 0.0781, -0.1511, 0.1519, 0.0332, 0.135, 0.3422, 0.0682, -0.0197, -0.0503, -0.4028, -0.4113, 0.4668, 0.1074, -0.2174, -0.4872, -0.6991, 0.2481, -0.0633, -0.439, -0.3, -0.6966, 0.6531, -0.1564, 0.5802, 0.0124, -0.3041, -0.1683, 0.2653, 0.1096, 0.0196, 0.2935, 0.5304, 0.0983, 0.4267, -0.4283, -0.2747, 1.1171, -0.367, 0.5179, -0.0441, -0.2864, -0.1414, -0.7498, -0.4919, -0.0126, -0.2561],
[-0.1803, -0.0738, 0.0264, 0.0886, -0.33, 0.0518, 0.1404, 0.2237, -0.124, 0.0661, 0.1476, 0.2011, -0.0955, 0.2322, 0.0992, -0.1357, 0.2587, 0.2553, 0.2607, 0.1199, -0.1543, 0.0879, -0.397, -0.3095, 0.102, 0.0953, 0.1782, 0.0007, -0.0694, 0.0929, -0.0619, 0.0362, -0.5436, -0.0058, 0.0102, -0.5518, 0.0998, 0.0265, 0.1761, -0.0847, 0.0075, 0.1469, -0.1057, -0.0717, 0.0518, -0.2322, 0.1486, -0.1373, 0.0705, -0.1121, 0.4595, -0.0144, 0.1369, -0.134, -0.0956, -0.056, -0.0827, -0.0618, 0.1628, 0.3716],
[-0.1917, -0.3425, -0.3008, -0.2138, 0.2255, -0.4426, -0.5776, 0.2536, -0.0257, -0.0305, -0.6049, -0.514, -0.5221, 0.4358, 0.2059, 0.0454, -0.1431, 0.0858, 0.5351, -0.2375, 0.0422, 0.5039, -0.5426, 0.2542, 0.722, -0.079, 0.2908, 0.0008, 0.5503, 0.054, 0.2766, -0.2566, 0.2159, -0.3744, -0.6129, 0.5405, -0.3528, -0.628, -0.3277, 0.2813, -0.1965, 0.0904, 0.2287, 0.2012, 0.1657, 0.1999, 0.2051, -0.0934, 0.0892, -0.1464, -0.37, 0.4386, -0.0037, -0.1589, -0.3409, -0.3743, -0.744, -0.2206, -0.1653, 0.3676],
[-0.0326, 0.2081, 0.1091, 0.0964, -0.3512, 0.0599, -0.4723, 0.0193, -0.0062, -0.3898, -0.1422, -0.1783, -0.1638, -0.7595, 0.0713, -0.065, -0.0037, 0.0507, 0.4298, 0.3454, -0.1879, 0.4842, 0.1054, -0.8958, -0.0106, 0.2682, -0.0843, 0.3152, -0.0496, -0.0146, -0.015, -0.1748, 0.2263, -1.4592, -0.3667, 0.2102, -0.4513, 0.4004, 0.1266, 0.0546, -0.115, -0.1717, -0.0955, 0.0153, 0.0821, 0.2145, -0.1623, 0.0598, -0.2444, 0.1514, 0.3187, 0.1036, 0.1465, 0.3404, -0.3142, 0.0237, -0.2932, 0.1179, -0.5387, 0.112],
[0.099, -0.0379, 0.1761, 0.2511, -0.1981, 0.1195, -0.0239, 0.1908, -0.283, -0.0229, -0.1986, -0.1803, -0.1514, 0.5207, 0.1679, -0.1962, -0.0447, -0.0254, 0.0914, -0.0996, -0.1867, -0.0243, 0.0755, 0.029, -0.0655, -0.2041, 0.094, 0.0886, -0.0025, 0.0578, -0.0756, -0.1468, 0.1753, -0.2927, -0.0357, 0.1037, -0.1317, -0.2612, -0.223, -0.1566, 0.0412, -0.0159, 0.1421, -0.242, 0.1767, 0.0685, -0.0414, -0.1097, 0.2357, 0.2484, 0.0665, -0.0931, -0.0255, -0.2236, 0.2165, 0.1238, -0.2916, 0.3989, -0.128, -0.2759],
[0.2203, -0.7213, -0.2368, -0.0205, 0.3248, 0.4824, -0.5943, -0.4692, 0.5989, 0.4213, -1.0698, -0.0376, 0.1322, -0.0559, 0.0797, 0.8032, -0.009, -0.048, -0.2211, 0.1289, 0.5576, -0.1578, -0.2174, -0.3705, 1.3289, 0.8964, -0.0268, -0.0937, 0.0702, 0.4252, 0.5415, 0.1935, 0.3495, -0.4616, -0.0452, -0.1555, -0.0372, 0.5135, 0.1706, -1.3653, -0.1236, -0.102, 0.2288, 0.1233, -0.0427, 0.0683, 0.0283, 0.0291, -0.1844, -0.3163, -0.5971, 0.9958, -0.7776, 0.5133, 0.7053, -0.1879, -0.3325, 0.0213, -0.2299, -0.4545],
[0.0613, -0.1517, -0.1873, -0.3038, -0.274, 0.2694, 0.006, 0.3491, -0.1965, 0.2576, -0.0697, -0.2286, -0.1023, -0.1288, -0.1277, -0.3181, 0.6193, -0.1294, -0.1625, -0.1033, -0.0162, -0.0694, -0.0814, -0.0729, -0.3652, 0.4227, 0.2441, -0.4206, -0.836, -0.0026, 0.5497, 0.075, -0.1081, -0.0272, -0.5918, 0.3179, -0.1542, 0.251, -0.0491, -0.5393, -0.5722, 0.3555, 0.1967, -0.1723, 0.288, 0.4791, 0.227, 0.4217, -0.2891, -0.0818, 0.9046, -0.3367, 0.4172, -0.1424, -0.217, -0.2433, -0.7194, -0.3883, 0.18, -0.0366],
[-0.1864, 0.1128, -0.0067, 0.121, -0.3005, -0.1557, -0.1184, 0.2743, -0.0325, 0.0901, 0.1817, 0.6298, -0.2871, 0.1029, 0.0692, -0.0496, 0.1609, 0.3328, -0.2183, 0.3142, 0.0776, -0.1222, -0.486, -0.0303, -0.1472, 0.1045, -0.0264, 0.1613, 0.173, -0.085, 0.2841, 0.0187, -0.349, -0.0957, -0.1526, -0.6662, -0.2533, 0.1293, -0.1229, 0.1127, -0.054, 0.0827, -0.1625, 0.0751, -0.0561, -0.1751, 0.2816, 0.0614, 0.0571, -0.0012, 0.7007, -0.0298, 0.1523, 0.0835, -0.1403, 0.0483, -0.1788, -0.0183, 0.041, 0.0788],
[-0.633, 0.185, -0.0254, -0.3633, 0.4537, -0.2431, 0.0942, -0.8249, 0.1703, 0.1493, -0.8532, -0.1554, -0.1409, 0.209, 0.0005, 0.0121, -0.0155, -0.3316, 0.1963, -0.4735, -0.0286, 0.5792, -0.3722, 0.1714, 0.73, -0.0437, 0.1419, 0.169, 0.5649, 0.103, 0.0419, -0.2345, -0.4754, -0.2909, -0.3548, -0.0586, -0.0749, 0.0408, -0.221, 0.5187, -0.1394, -0.394, 0.0595, -0.3246, -0.1585, -0.0921, -0.1488, -0.1937, 0.0704, -0.1906, 0.1143, -0.1769, 0.0262, -0.244, -0.2269, -0.1711, -0.682, -0.023, 0.0399, -0.1441],
[-0.0122, -0.2033, 0.1422, 0.0598, -0.4597, 0.0152, -0.8041, 0.2837, 0.0418, 0.1913, -0.1465, -0.3331, -0.0915, -0.2031, 0.2352, -0.352, 0.1347, -0.0921, 0.2124, 0.2584, 0.0655, 0.0907, -0.3081, -1.169, -0.326, -0.0608, 0.0971, 0.6679, -0.3291, 0.023, -0.0837, -0.3225, -0.1376, -1.3171, -0.4075, 0.3812, -0.4767, 0.024, 0.203, -0.1885, 0.5028, -0.0546, -0.1887, 0.3786, -0.1164, 0.2373, 0.0071, 0.1234, -0.1635, 0.1511, 0.8887, 0.6303, 0.3243, 0.3579, -0.4252, 0.147, -0.8801, 0.2132, -0.2972, -0.121],
[0.0269, -0.0292, 0.2748, 0.3842, -0.0625, 0.1032, 0.309, -0.1364, 0.094, -0.1717, -0.3871, 0.0653, 0.1498, 0.6052, -0.0672, -0.1917, 0.0454, -0.1865, 0.2284, -0.1807, 0.2784, -0.0785, 0.0021, -0.0808, -0.0439, -0.0843, 0.4569, 0.3769, -0.0156, -0.1578, -0.0841, 0.2501, 0.1044, -0.2291, -0.0463, -0.1688, -0.111, -0.0123, 0.0196, -0.6777, 0.2048, 0.0541, -0.0382, 0.1569, 0.0231, 0.1682, 0.0037, -0.049, 0.4828, 0.1676, 0.1353, -0.1203, -0.3663, -0.2036, -0.0483, 0.2879, -0.0569, 0.4507, 0.1258, -0.2557],
[0.3593, -0.5279, -0.1251, -0.1459, 0.2785, 0.7719, -0.5954, -0.4103, 0.6778, 0.9123, -1.0075, -0.2695, 0.0401, 0.3275, 0.0053, 1.0772, 0.4674, -0.1461, -0.1424, -0.0208, 1.0941, -0.3781, 0.1112, -0.3042, 1.3482, 0.7334, -0.0366, -0.2989, -0.0276, -0.0875, 0.6906, 0.1152, 0.3929, -0.195, 0.1842, -0.2053, 0.0212, 0.4139, 0.0257, -1.5114, -0.1898, 0.129, -0.0016, -0.0776, -0.1878, -0.0347, 0.3064, 0.2993, -0.1155, -0.0638, -0.4431, 1.5867, -0.7097, 0.4453, 0.8673, -0.0689, -0.1708, -0.2826, -0.2899, -0.562],
[-0.6113, -0.1645, 0.0151, -0.4541, -0.039, 0.214, -0.2665, 0.1771, 0.2833, -0.6027, 0.3197, -0.0996, -0.2152, -0.3987, 0.2979, -0.7178, 0.8416, 0.0756, -0.3815, 0.0385, -0.1127, -0.1798, -0.2558, -0.6744, 0.0635, 0.8068, 0.5207, -0.2517, -0.4151, 0.2717, 0.9561, -0.0418, -0.3722, -0.1928, -0.5782, 0.5366, -0.1252, 0.4125, -0.1947, -1.1735, -0.6867, 0.8325, 0.0309, -0.2238, 0.7379, 0.3588, 0.227, 0.4416, -0.8621, -0.6915, 0.82, -0.7938, 0.9972, -0.2473, 0.1923, -0.6047, -0.4172, -0.5922, 0.6307, -0.0384],
[-0.367, -0.1822, 0.1424, -0.005, -0.226, 0.0101, 0.1741, 0.5441, -0.2523, 0.0983, 0.3812, 0.4839, -0.1633, 0.2253, 0.1073, -0.1778, 0.0221, 0.4106, -0.5149, 0.0337, 0.0198, -0.0771, -0.546, -0.1788, 0.0904, 0.2284, -0.0865, 0.0707, 0.0317, -0.0516, 0.0432, 0.0692, 0.0952, -0.142, -0.147, -0.4135, -0.2445, -0.0253, -0.0985, 0.4692, -0.0228, -0.0189, -0.3059, -0.0166, -0.0882, 0.3295, 0.1742, 0.0863, -0.1534, 0.0488, 0.8111, -0.2232, 0.1946, -0.0463, -0.3639, 0.0323, -0.0964, 0.0824, 0.0601, 0.1958],
[0.2827, 0.6896, -0.1105, -0.1753, -0.4262, -0.1277, 0.7219, 0.0475, -0.4546, -0.0663, -0.4907, -0.2299, -0.303, -0.1094, -0.1493, 0.206, 0.1626, 0.0348, 0.3487, -0.0543, 0.2139, 0.4536, -0.3149, 0.4461, 0.3404, 0.0551, 0.2722, -0.2761, 0.327, -0.8269, 0.1753, -0.5299, -0.5394, -0.2552, -0.4896, -0.2435, -0.0476, 1.2604, -0.222, 0.7336, -0.2257, -0.6352, 0.1109, 0.3357, -0.3525, 0.0068, -0.1247, -0.1563, -0.211, -0.2486, -0.011, -0.5042, 0.7224, -0.8272, 0.0603, -0.3661, -0.9692, -0.074, 0.6595, 0.1133],
[-0.1972, -0.2295, 0.327, -0.156, -0.277, -0.0119, -0.6257, 0.0945, 0.3833, -0.0749, -0.5175, 0.1626, 0.0117, -0.3054, -0.1332, -0.2993, 0.3357, -0.197, 0.2444, 0.0016, 0.144, 0.3677, -0.008, -1.17, 0.1561, -0.0962, 0.3609, 0.7563, 0.1267, 0.31, 0.1305, -0.336, -0.4727, -1.8384, -0.4716, -0.0567, 0.0159, 0.3088, -0.226, -0.4594, 0.7825, 0.1925, 0.0122, -0.0115, 0.0002, 0.477, 0.1492, 0.1765, -0.4138, 0.0299, 0.8636, 0.5002, 0.0716, -0.0152, -0.1168, -0.0203, -1.3533, 0.1836, 0.2678, 0.0465],
[0.4274, -0.0356, 0.0565, 0.2139, 0.0857, 0.1144, 0.5055, 0.0242, -0.1283, -0.0275, -0.755, -0.1936, -0.0561, 0.6559, -0.0786, -0.2444, -0.0577, -0.0575, -0.0858, 0.1836, 0.0529, -0.2124, -0.0408, -0.2532, -0.0192, -0.0051, 0.0632, 0.1275, -0.1213, -0.2391, -0.2751, 0.3948, 0.3282, -0.3247, -0.0231, 0.0243, -0.4414, -0.2079, 0.1613, -0.5313, 0.6166, 0.0745, -0.1994, 0.1032, -0.1198, 0.1129, 0.0311, -0.1246, 0.2416, 0.1578, 0.1341, 0.0442, -0.0169, 0.0463, 0.105, 0.2609, -0.1766, 0.1613, -0.2093, -0.1581],
]

weights1 = [
[-1.5851, -0.0183, 0.4515, 1.6104],
[-0.8449, -0.2412, 0.5204, 0.7624],
[0.3317, -0.5494, 0.4661, -0.6223],
[-0.4342, 0.2446, 0.491, -0.257],
[-1.049, -0.2659, 0.3699, 0.7766],
[0.2537, 0.8627, -1.0866, -0.5651],
[-1.435, -0.2845, 0.3821, 0.5123],
[-0.0373, -1.0531, 0.2633, 0.7481],
[0.3831, -0.8709, -0.359, 0.7681],
[-0.9931, 0.9389, -0.6651, 0.3724],
[0.0761, 1.4296, -1.7079, 0.1247],
[1.0485, -0.3413, -0.1212, -1.4462],
[0.7976, -0.6672, 0.1532, -0.7626],
[-1.2289, 1.3334, 0.3223, -1.4344],
[-0.4595, -0.0871, -0.1619, 0.2471],
[-0.7956, -0.774, -0.6218, 0.8613],
[0.5172, 0.5279, -0.8822, -0.3521],
[-0.3746, -0.5986, 0.0124, 0.2739],
[0.7659, 0.785, -0.9029, -1.3324],
[-0.5971, 0.0939, -0.1147, 0.2747],
[-1.8809, 1.0748, 0.3728, 0.5223],
[0.324, -0.6742, 1.4722, -1.6467],
[0.91, 0.0945, -0.9889, -0.8262],
[-1.0678, 1.2901, 0.284, -1.1285],
[0.3417, -0.5471, -2.0576, 1.1618],
[0.6617, 0.6624, -1.2366, 0.027],
[0.295, -0.3838, 0.0755, -0.4812],
[0.649, -0.3033, 0.7436, -1.189],
[-0.6437, -0.9498, 0.3586, 1.1231],
[-1.2712, -0.7371, -0.8247, 2.5752],
[0.462, 0.4429, -1.102, 0.5],
[-0.5316, -0.7587, 0.728, 0.2288],
[-1.1674, 0.6615, -0.521, 0.9503],
[-1.1381, 2.0751, -1.0749, -1.1614],
[0.9278, 0.3553, -1.0627, -0.5565],
[0.2966, 0.5697, -1.8182, 0.077],
[1.0925, -0.6708, 0.2043, -1.0916],
[0.4361, -1.9872, -0.3978, 1.9144],
[-0.4939, 0.2396, 0.3035, 0.5027],
[-1.4122, 1.3687, -0.8267, 0.2964],
[-0.2122, -1.4275, 1.7174, -0.3999],
[0.7168, -1.3692, -0.7964, 0.7042],
[0.2806, 0.4568, 0.2561, -1.1428],
[0.0617, -2.0435, 1.259, -0.0652],
[0.2488, -0.2329, -0.7382, 0.1904],
[0.7074, -1.6427, 0.2588, 0.1903],
[0.4927, -0.0054, -1.1237, 0.3106],
[0.515, -0.1264, -0.5148, -0.288],
[-0.5699, 0.3226, 0.5814, -0.3123],
[-0.3095, -0.2229, 0.6437, -0.4643],
[0.2249, 1.232, -0.1659, -1.2219],
[-0.579, 1.2867, -0.8747, -0.0123],
[0.1661, -0.0276, -1.4952, 0.6792],
[1.3434, -1.3738, -0.4351, -1.1109],
[0.6575, 0.7226, -0.9801, -1.4637],
[-0.1778, 0.0057, 0.584, -0.2063],
[1.1329, 0.5857, -0.9916, -1.5838],
[0.1464, 0.1638, 0.5046, -0.493],
[1.2632, -0.9535, -0.4003, -0.347],
[-0.2422, -1.0161, 0.2896, 0.5524],
]

biases0 = [[0.0141, -0.1035, 0.1131, 0.2895, 0.6114, -0.3874, 0.4379, 0.3316, 0.2772, -0.2618, -0.3815, 0.3232, -0.2089, -0.5623, -0.069, 0.5559, -0.3296, 0.382, 0.1905, -0.0638, -0.0506, -0.5595, -0.5934, -0.1704, 0.7945, 0.0213, 0.2589, -0.3626, 0.4093, 0.1074, 0.1545, 0.6041, 0.3419, -0.4179, -0.4075, -0.6118, 0.2472, 0.4765, -0.0136, -0.3606, 0.72, 0.1036, -0.3088, 0.7671, 0.0511, 0.7611, -0.0786, -0.0212, -0.002, 0.4023, 0.006, -0.1682, -0.3966, 0.0429, -0.3701, 0.402, -0.1013, -0.1332, -0.2431, 0.3572]]

biases1 = [[-0.193, -0.4123, 0.3901, -0.0842]]

def relu(num):
    if num >= 0:
        return num
    return 0

#### END OF ML PORTION ####


# Init connection settings
DATA_HOST = gethostname()
DATA_PORT = 8080

EVAL_HOST = "192.168.95.247"
EVAL_PORT = 1515

# Variables for Hardware AI
WINDOW_SIZE = 20
INT_TO_ACTION_MAPPING = {
    0: 'grenade',
    1: 'shield',
    2: 'reload',
    3: 'logout',
    4: 'nil'
}
THRESHOLD = 10000 # Tune this value

# Gamemode - 1P/2P/2P Unrestricted (1/2/3)
GAMEMODE = int(sys.argv[1])
# Check if valid GAMEMODE
if GAMEMODE not in (1, 2, 3):
    print("Invalid gamemode! 1 - 1P | 2 - 2P | 3 - 2P Unrestricted")
    exit()

# Init Queues
gun_one_queue = []
gun_two_queue = []
vest_one_queue = []
vest_two_queue = []
motion_one_queue = []
motion_two_queue = []
action_one_queue = []
action_two_queue = []

message_queue = []

global action_flag_1
global action_flag_2
global last_action_time_1
global last_action_time_2

DATA_SIZE = 25

action_flag_1 = True
action_flag_2 = True
last_action_time_1 = datetime.datetime.now()
last_action_time_2 = datetime.datetime.now()

# Init game state
initial_game_state = {
                        "p1": {
                            "hp": 100,
                            "action": "",
                            "bullets": 6,
                            "grenades": 2,
                            "shield_time": 0,
                            "shield_health": 0,
                            "num_deaths": 0,
                            "num_shield": 3
                        },
                        "p2": {
                            "hp": 100,
                            "action": "",
                            "bullets": 6,
                            "grenades": 2,
                            "shield_time": 0,
                            "shield_health": 0,
                            "num_deaths": 0,
                            "num_shield": 3
                        }
                    }

# Init Encryption settings
key = "thisismysecretky"
key = bytes(str(key), encoding="utf8")

actions = ['shoot', 'hit', 'grenade', 'reload', 'shield', 'logout', 'shield_timeout']

class DataServer:
    global action_flag_1
    global action_flag_2
    def __init__(self, HOST, PORT):
        while True:
            try:
                self.HOST = HOST
                self.PORT = PORT
                self.serverSocket = socket(AF_INET, SOCK_STREAM)
                self.serverSocket.bind((HOST,PORT))
                self.client_sockets = []
                break
            except BrokenPipeError:
                sleep(0.1)

    def send_to_relay(self, message):
        encodedMessage = message.encode()
        # Encrypt data
        cipher = AES.new(key, AES.MODE_CBC)
        encryptedMessage = cipher.iv + cipher.encrypt(pad(encodedMessage, AES.block_size))
        encryptedMessage_64 = b64encode(encryptedMessage)
        len_byte = str(len(encryptedMessage_64)).encode("utf-8") + b'_'
        finalmsg = len_byte+encryptedMessage_64

        # Send to all clients
        for client_socket in self.client_sockets:
            client_socket.send(finalmsg)

    # Thread to receive the message
    def thread_DataServer_Receiver(self,connSocket, clientAddr):
        global action_flag_1
        global action_flag_2
        global last_action_time_1
        global last_action_time_2
        while True:
            # Receive and Parse message (len_EncryptedMessage)
            # recv length followed by '_' followed by cypher
            message = b''
            while not message.endswith(b'_'):
                _d = connSocket.recv(1)
                if not _d:
                    message = b''
                    break
                message += _d
            if len(message) == 0:
                print('no more data from the client')
                self.serverSocket.close()
                return

            message = message.decode("utf-8")
            length = int(message[:-1])
            message = b''
            while len(message) < length:
                _d = connSocket.recv(length - len(message))
                if not _d:
                    message = b''
                    break
                message += _d
            if len(message) == 0:
                print('no more data from the client')
                self.serverSocket.close()
                return
            decodedMessage = b64decode(message)

            iv = decodedMessage[:AES.block_size]
            cipher = AES.new(key, AES.MODE_CBC, iv)
            decryptedMessage = cipher.decrypt(decodedMessage[16:])
            decryptedMessage = unpad(decryptedMessage, AES.block_size)
            decryptedMessage = decryptedMessage.decode()
            x = decryptedMessage.split()
            if(x[0] == "vest"):
                vest_one_queue.append(1) if x[1] == '0' else vest_two_queue.append(1)
            elif(x[0] == "gun"):
                gun_one_queue.append(1) if x[1] == '0' else  gun_two_queue.append(1) 
            else:
                unpacked = eval(x[1])
                if x[0] == '0':
                    motion_one_queue.append(unpacked)
                    action_flag_1 = False
                    last_action_time_1 = datetime.datetime.now()
                    
                else:
                    motion_two_queue.append(unpacked)
                    action_flag_2 = False
                    last_action_time_2 = datetime.datetime.now()
            

    # Data Server Thread
    def thread_DataServer(self):
        # Listens for incoming connections
        self.serverSocket.listen()
        print("Data Server is ready to receive message")

        try:
            while True:
                # Upon successful connection with a client socket, spawns a new thead
                connSocket, clientAddr = self.serverSocket.accept()
                self.client_sockets.append(connSocket)
                print("Connected to ", clientAddr)
                serverThread = Thread(target=self.thread_DataServer_Receiver, args=(connSocket, clientAddr))
                serverThread.start()
        except KeyboardInterrupt:
            print("Closing socket")
            self.serverSocket.close()

class EvalClient:
    def __init__(self, HOST, PORT):
        while True:
            try:
                self.HOST = HOST
                self.PORT = PORT
                self.clientSocket = socket(AF_INET, SOCK_STREAM)
                self.clientSocket.connect((HOST, PORT))
                break
            except BrokenPipeError:
                sleep(0.1)

    # Eval Client Thread
    def thread_EvalClient(self):
        try:
            while True:
                # Check if message_queue has any messages
                while message_queue:
                    message = json.dumps(message_queue.pop())
                    encodedMessage = message.encode()
                    # Encrypt data
                    cipher = AES.new(key, AES.MODE_CBC)
                    encryptedMessage = cipher.iv + cipher.encrypt(pad(encodedMessage, AES.block_size))
                    encryptedMessage_64 = b64encode(encryptedMessage)
                    len_byte = str(len(encryptedMessage_64)).encode("utf-8") + b'_'
                    finalmsg = len_byte+encryptedMessage_64
                    # Send data
                    self.clientSocket.send(finalmsg)
                    # Pop from message_queue
                    message_queue.clear()

                    # Receive updated game state (Ground Truth)
                    message = b''
                    while not message.endswith(b'_'):
                        _d = self.clientSocket.recv(1)
                        if not _d:
                            message = b''
                            break
                        message += _d
                    if len(message) == 0:
                        print('no more data from the client')
                        self.serverSocket.close()
                        return

                    message = message.decode("utf-8")
                    length = int(message[:-1])
                    message = b''
                    while len(message) < length:
                        _d = self.clientSocket.recv(length - len(message))
                        if not _d:
                            message = b''
                            break
                        message += _d
                    if len(message) == 0:
                        print('no more data from the client')
                        self.clientSocket.close()
                        return
                    decodedMessage = message.decode()
                    # Update game state to ground truth
                    updated_game_state = json.loads(decodedMessage)
                    ge.game_state = updated_game_state
                    # Check for either player logout
                    if updated_game_state["p1"]["action"] == "logout":
                        ge.reset_player(1)
                    if updated_game_state["p2"]["action"] == "logout":
                        ge.reset_player(2)
                    # Send updated HP and Bullets to Relay - [HP1, HP2, Bullet1, Bullet2]
                    hp_and_bullet = str([updated_game_state["p1"]["hp"], updated_game_state["p2"]["hp"], updated_game_state["p1"]["bullets"], updated_game_state["p2"]["bullets"]])
                    ds.send_to_relay(hp_and_bullet)
                    
                    
        except KeyboardInterrupt:
            print("Closing Client Socket")
            self.clientSocket.close()  

class GameEngine:
    def __init__(self):
        self.game_state = initial_game_state
        self.shieldEndTimes = {1: datetime.datetime.now() , 2: datetime.datetime.now()}
        self.p1_move = False
        self.p2_move = False
        self.is_game_over = False
        
    def shoot_bullet(self, player):
        if player == 1:
            self.game_state["p1"]["bullets"] -= 1 if self.game_state["p1"]["bullets"] > 0 else 0
            self.game_state["p1"]["action"] = "shoot"
        else:
            self.game_state["p2"]["bullets"] -= 1 if self.game_state["p2"]["bullets"] > 0 else 0
            self.game_state["p2"]["action"] = "shoot"

    def take_damage(self, player, damage):
        overflow_damage = damage - self.game_state["p1"]["shield_health"] if player == 1 else damage - self.game_state["p2"]["shield_health"]
        if player == 1:
            if overflow_damage > 0:
                self.game_state["p1"]["hp"] -= overflow_damage
                self.game_state["p1"]["shield_health"] = 0
            else:
                self.game_state["p1"]["shield_health"] -= damage
        else:
            if overflow_damage > 0:
                self.game_state["p2"]["hp"] -= overflow_damage
                self.game_state["p2"]["shield_health"] = 0
            else:
                self.game_state["p2"]["shield_health"] -= damage

    def get_hit(self, player):
        if player == 1:
            if self.game_state["p2"]["bullets"] > 0:
                self.take_damage(1, 10) 
        else:
            if self.game_state["p1"]["bullets"] > 0:
                self.take_damage(2, 10)

    def throw_grenade(self, player):
        if player == 1:
            if self.game_state["p1"]["grenades"] > 0:
                self.take_damage(2, 30)
                self.game_state["p1"]["grenades"] -= 1
                self.game_state["p1"]["action"] = "grenade"
        else:
            if self.game_state["p2"]["grenades"] > 0:
                self.take_damage(1, 30)
                self.game_state["p2"]["grenades"] -= 1
                self.game_state["p2"]["action"] = "grenade"

    def reload_gun(self, player):
        if player == 1:
            self.game_state["p1"]["bullets"] = 6 if self.game_state["p1"]["bullets"] == 0 else self.game_state["p1"]["bullets"]
            self.game_state["p1"]["action"] = "reload"
        else:
            self.game_state["p2"]["bullets"] = 6 if self.game_state["p2"]["bullets"] == 0 else self.game_state["p2"]["bullets"]
            self.game_state["p2"]["action"] = "reload"

    def activate_shield(self, player):
        if player == 1:
            self.game_state["p1"]["action"] = "shield"
            if self.game_state["p1"]["num_shield"] > 0 and self.game_state["p1"]["shield_time"] == 0:
                self.game_state["p1"]["shield_health"] = 30
                self.game_state["p1"]["shield_time"] = 10
                self.game_state["p1"]["num_shield"] -= 1
                shieldTimer = Timer(10, self.shield_timeout, args=(1,))
                shieldTimer.start()
                self.shieldEndTimes[1] = datetime.datetime.now() + datetime.timedelta(seconds=10)
        else:
            self.game_state["p2"]["action"] = "shield"
            if self.game_state["p2"]["num_shield"] > 0 and self.game_state["p2"]["shield_time"] == 0:
                self.game_state["p2"]["shield_health"] = 30
                self.game_state["p2"]["shield_time"] = 10
                self.game_state["p2"]["num_shield"] -= 1
                shieldTimer = Timer(10, self.shield_timeout, args=(2,))
                shieldTimer.start()
                self.shieldEndTimes[2] = datetime.datetime.now() + datetime.timedelta(seconds=10)

    def respawn_player_if_dead(self):
        if self.game_state["p1"]["hp"] <= 0:
            print("Player 1 Respawned")
            curr_num_deaths = self.game_state["p1"]["num_deaths"]
            self.game_state["p1"] = {
                            "hp": 100,
                            "action": "",
                            "bullets": 6,
                            "grenades": 2,
                            "shield_time": 0,
                            "shield_health": 0,
                            "num_deaths": curr_num_deaths + 1,
                            "num_shield": 3
                        }
        if self.game_state["p2"]["hp"] <= 0:
            print("Player 2 Respawned")
            curr_num_deaths = self.game_state["p2"]["num_deaths"]
            self.game_state["p2"] = {
                            "hp": 100,
                            "action": "",
                            "bullets": 6,
                            "grenades": 2,
                            "shield_time": 0,
                            "shield_health": 0,
                            "num_deaths": curr_num_deaths + 1,
                            "num_shield": 3
                        }

    def shield_timeout(self, player):
        print("P", str(player), "Shield Timeout")
        if player == 1:
            self.game_state["p1"]["shield_health"] = 0
            self.game_state["p1"]["shield_time"] = 0
        else:
            self.game_state["p2"]["shield_health"] = 0
            self.game_state["p2"]["shield_time"] = 0

    def update_shield_timers(self):
        if self.shieldEndTimes[1] > datetime.datetime.now():
            timeLeft = self.shieldEndTimes[1] - datetime.datetime.now()
            timeLeft = int(timeLeft.total_seconds())
            self.game_state["p1"]["shield_time"] = timeLeft
        if self.shieldEndTimes[2] > datetime.datetime.now():
            timeLeft = self.shieldEndTimes[2] - datetime.datetime.now()
            timeLeft = int(timeLeft.total_seconds())
            self.game_state["p2"]["shield_time"] = timeLeft

    def reset_player(self, player):
        if player == 1:
            self.game_state["p1"]["hp"] = 100
            self.game_state["p1"]["action"] = ""
            self.game_state["p1"]["bullets"] = 6
            self.game_state["p1"]["grenades"] = 2
            self.game_state["p1"]["shield_time"] = 0
            self.game_state["p1"]["shield_health"] = 0
            self.game_state["p1"]["num_deaths"] = 0
            self.game_state["p1"]["num_shield"] = 3
        if player == 2:
            self.game_state["p2"]["hp"] = 100
            self.game_state["p2"]["action"] = ""
            self.game_state["p2"]["bullets"] = 6
            self.game_state["p2"]["grenades"] = 2
            self.game_state["p2"]["shield_time"] = 0
            self.game_state["p2"]["shield_health"] = 0
            self.game_state["p2"]["num_deaths"] = 0
            self.game_state["p2"]["num_shield"] = 3

    def logout(self, player):
        if player == 1:
            self.game_state["p1"]["action"] = "logout"
        if player == 2:
            self.game_state["p2"]["action"] = "logout"

    def handle_player_action(self, player):
        action = action_one_queue.pop() if player == 1 else action_two_queue.pop()
        if action == "grenade":
            self.update_game_state(player, "grenade")
        elif action == "shield":
            self.update_game_state(player, "shield")
        elif action == "reload":
            self.update_game_state(player, "reload")
        elif action == "logout":
            self.update_game_state(player, "logout")

    def update_game_state(self, player, action):
        print("P", str(player), " - ", action)

        # Update players' shield timers
        self.update_shield_timers()

        # Shoot if player has bullets
        if action == "shoot":
            self.shoot_bullet(player)
        # Player loses 10 HP from getting hit
        elif action == "hit":
            self.get_hit(player)
        # Opponent always gets hit by grenade
        elif action == "grenade":
            self.throw_grenade(player)
        # Reload only if player has 0 bullets
        elif action == "reload":
            self.reload_gun(player)
        # Give player a shield 
        elif action == "shield":
            self.activate_shield(player)
        elif action == "shield_timeout":
            self.shield_timeout(player)
        elif action == "logout":
            self.logout(player)

        # Respawns player if dead
        self.respawn_player_if_dead()


    # Game Engine Thread
    def thread_GameEngine(self):
        # Starts game upon input
        print("Press 'Enter' when game starts...")
        input()

        # Flush any inital data
        motion_one_queue.clear()
        motion_two_queue.clear()
        gun_one_queue.clear()
        gun_two_queue.clear()
        vest_one_queue.clear()
        vest_two_queue.clear()
        motion_one_queue.clear()
        motion_two_queue.clear()
        action_one_queue.clear()
        action_two_queue.clear()

        # ONE PLAYER GAME ENGINE
        # Checks for player 1's action + player 2's vest
        if GAMEMODE == 1:  
            while True:
                # Waits for player 1 action
                while not gun_one_queue and not action_one_queue:
                    pass

                # ADD SLEEP TO WAIT FOR VEST TO GET HIT??
                sleep(0.5)
                # Check for P2 vest
                if vest_two_queue:
                    self.update_game_state(2, "hit")

                # Check for P1 actions
                if gun_one_queue:
                    self.update_game_state(1, "shoot")
                elif action_one_queue:
                    self.handle_player_action(1)

                # Clear all action buffers
                gun_one_queue.clear()
                action_one_queue.clear()
                vest_two_queue.clear()

                # Add to message_queue to send to eval server
                message_queue.append(self.game_state)
                
                # Print out for debugging purposes
                formatted_json = json.dumps(self.game_state, indent=4)
                pretty_json = highlight(formatted_json, lexers.JsonLexer(), formatters.TerminalFormatter())
                print(pretty_json, '\n')
                

        # TWO PLAYER GAME ENGINE
        # Checks for both player 1 and 2 action and vest
        elif GAMEMODE == 2:
            while True:
                # Waits for player 1 and 2 action
                while (not gun_one_queue and not action_one_queue) or (not gun_two_queue and not action_two_queue):
                    pass
                
                # DEBUG
                if gun_one_queue:
                    print("GUN ONE")
                if gun_two_queue:
                    print("GUN TWO")
                if action_one_queue:
                    print("ACTION ONE")
                if action_two_queue:
                    print("ACTION TWO")

                # Check for shield and prioritise action
                if action_one_queue:
                    if action_one_queue[0] == 'shield':
                        self.handle_player_action(1)
                        self.p1_move = True
                if action_two_queue:
                    if action_two_queue[0] == 'shield':
                        self.handle_player_action(2)
                        self.p2_move = True

                # ADD SLEEP TO WAIT FOR VEST TO GET HIT??
                sleep(0.5)

                # Check for P1 vest
                if vest_one_queue:
                    self.update_game_state(1, "hit")

                # Check for P2 vest
                if vest_two_queue:
                    self.update_game_state(2, "hit")

                # Check for P1 actions if not shield
                if not self.p1_move:
                    if gun_one_queue:
                        self.update_game_state(1, "shoot")
                    elif action_one_queue:
                        self.handle_player_action(1)
                
                # Check for P2 actions if not shield
                if not self.p2_move:
                    if gun_two_queue:
                        self.update_game_state(2, "shoot")
                    elif action_two_queue:
                        self.handle_player_action(2)

                # Clear all action buffers
                gun_one_queue.clear()
                gun_two_queue.clear()
                action_one_queue.clear()
                action_two_queue.clear()
                vest_one_queue.clear()
                vest_two_queue.clear()

                # Reset moves checks
                self.p1_move = False
                self.p2_move = False

                # Add to message_queue to send to eval server
                message_queue.append(self.game_state)

                # Print out for debugging purposes
                formatted_json = json.dumps(self.game_state, indent=4)
                pretty_json = highlight(formatted_json, lexers.JsonLexer(), formatters.TerminalFormatter())
                print(pretty_json, '\n')
        
        # TWO PLAYER UNRESTRICTED GAME ENGINE
        elif GAMEMODE == 3:
            while True:
                # Check for player action
                if action_one_queue:
                    self.handle_player_action(1)
                if action_two_queue:
                    self.handle_player_action(2)

                # Check for vest
                if vest_one_queue:
                    self.update_game_state(1, "hit")
                if vest_two_queue:
                    self.update_game_state(2, "hit")

                # Check for gun
                if gun_one_queue:
                    self.update_game_state(1, "shoot")
                if gun_two_queue:
                    self.update_game_state(2, "shoot")


                # Clear all action buffers
                # gun_one_queue.clear()
                # gun_two_queue.clear()
                # action_one_queue.clear()
                # action_two_queue.clear()
                # vest_one_queue.clear()
                # vest_two_queue.clear()

                # Print out for debugging purposes
                formatted_json = json.dumps(self.game_state, indent=4)
                pretty_json = highlight(formatted_json, lexers.JsonLexer(), formatters.TerminalFormatter())
                print(pretty_json, '\n')

class HardwareAI:

    def __init__(self, player):
        self.player = player
        self.overlay = Overlay('/home/xilinx/new_data_bitstream.bit')
        self.dma = self.overlay.axi_dma_0

    def predict(self):
        queue = motion_one_queue if self.player == 1 else motion_two_queue

        if len(queue) < DATA_SIZE:
            print("function submit_input: input length is less than 25")
            return []
        
        # ave_queue = queue
        access = (len(queue) - 20) // 2
        ave_queue = []
        for i in range(access, access+20):
            ave_queue.append(queue[i])

        print("ave_queue: ", ave_queue)
        #### ML Portion: Delete after use ####

        ave_queue_1_times_120 = [[]]

        for i in range(20):
            for j in range(6):
                if j < 3:
                    ave_queue_1_times_120[0].append(ave_queue[i][j] / 180)
                else:
                    ave_queue_1_times_120[0].append(ave_queue[i][j] / 999)

        # result is 3x4
        result0 = [[0.0 for i in range(60)]]
        result1 = [[0.0 for i in range(4)]]

        for i in range(len(ave_queue_1_times_120)):
            # 1 iter
            for j in range(len(weights0[0])):
                # 60 iter
                for k in range(len(weights0)):
                    # 120 iter
                    # print(type(ave_queue[i][k]), type(weights0[k][j]))
                    result0[i][j] += ave_queue_1_times_120[i][k] * weights0[k][j]

        for i in range(len(biases0[0])):
            result0[0][i] += biases0[0][i]
            result0[0][i] = relu(result0[0][i])

        for i in range(len(result0)):
            # 1 iter
            for j in range(len(weights1[0])):
                # 60 iter
                for k in range(len(weights1)):
                    # 120 iter
                    result1[i][j] += result0[i][k] * weights1[k][j]

        out = result1[0]
        # output = result1[0]
        
        #### End of ML Portion ####

        # in_buffer = allocate(shape=(120,), dtype=np.int32)
        # out_buffer = allocate(shape=(5,), dtype=np.int32)

        # for i in range(20):
        #     for j in range(6):
        #         if j < 3:
        #             in_buffer[i] = unpack('i', pack('f', ave_queue[i][j] / 180))[0]
        #         else:
        #             in_buffer[i] = unpack('i', pack('f', ave_queue[i][j] / 999))[0]

        # self.dma.sendchannel.transfer(in_buffer)
        # self.dma.recvchannel.transfer(out_buffer)
        # self.dma.sendchannel.wait()
        # self.dma.recvchannel.wait()

        # out = (out_buffer[0:4])
        # out = out.tolist()
        output = [0 for i in range(4)]
        can_softmax = True
        for i in range(4):
            # output[i] = unpack('f', pack('i', out[i]))[0]
            output[i] = out[i]
            if output[i] > 700: # Limit for when softmax cannot be used
                can_softmax = False
        
        if can_softmax:
            total = 0.0000001
            for val in output:
                total += exp(val)
            for i in range(len(output)):
                output[i] = exp(output[i]) / total
            if max(output) < 0.6:
                return INT_TO_ACTION_MAPPING[4]

        # print("ML output: ", out)
        output = [round(i, 3) for i in output]
        print("Softmax output: ", output)

        predicted_int = out.index(max(out))
        return INT_TO_ACTION_MAPPING[predicted_int]

    def thread_hardware_ai(self):
        global motion_one_queue
        global motion_two_queue
        global action_flag_1
        global action_flag_2
        while True:
            # Check if last action exceeds 0.5s
            if (datetime.datetime.now() - last_action_time_1).total_seconds() >= 0.5:
                action_flag_1 = True
            if (datetime.datetime.now() - last_action_time_2).total_seconds() >= 0.5:
                action_flag_2 = True

            # Clear buffer if insufficient
            if action_flag_1 and len(motion_one_queue) < DATA_SIZE:
                motion_one_queue.clear()
            if action_flag_2 and len(motion_two_queue) < DATA_SIZE:
                motion_two_queue.clear()

            # Predict action if buffer has sufficient data
            if self.player == 1 and action_flag_1 and len(motion_one_queue) >= DATA_SIZE:
                print("PREDICTING....")
                action_classified = self.predict()
                motion_one_queue.clear()
                if action_classified != "nil":
                    print("action classified")
                    action_one_queue.append(action_classified)
            elif self.player == 2 and action_flag_2 and len(motion_two_queue) >= DATA_SIZE:
                action_classified = self.predict()
                motion_two_queue.clear()
                if action_classified != "nil":
                    action_two_queue.append(action_classified)
            

def thread_debug():
    # return
    while True:
        # print("\r", "GUN 1 - ", gun_one_queue, end = "")
        # print("GUN 2 - ", gun_two_queue, end = "")
        # print("VEST 1 - ", vest_one_queue, end = "")
        # print("VEST 2 - ", vest_two_queue, end = "")
        print("\r", "MOTION 1 - ", len(motion_one_queue), "  ", end = "")
        print("MOTION 2 - ", len(motion_two_queue), end = "")
        # print("ACTION 1 - ", action_one_queue, "  ", end = "")
        # print("ACTIOM 2 - ", action_two_queue, end = "")
        # print("Motion size = ", len(motion_one_queue))
        # print(action_one_queue)

def thread_mockP1():
    while True:
        sleep(2)
        vest_one_queue.append(1)
        gun_one_queue.append(1)
        sleep(2)
        action_one_queue.append('reload')
        vest_one_queue.append(1)
        break

def thread_mockP2():
    while True:
        action_two_queue.append('shield')
        sleep(2)
        gun_two_queue.append(1)
        vest_one_queue.append(1)
        sleep(2)
        gun_two_queue.append(1)
        break

# Init global objects
ds = DataServer(DATA_HOST, DATA_PORT)
# ec = EvalClient(EVAL_HOST, EVAL_PORT)
ge = GameEngine()
ai1 = HardwareAI(player=1)
ai2 = HardwareAI(player=2)

def main():
    print("GAMEMODE-", GAMEMODE)

    data_server_thread = Thread(target=ds.thread_DataServer)
    # eval_server_thread = Thread(target=ec.thread_EvalClient)
    game_engine_thread = Thread(target=ge.thread_GameEngine)
    hardware_ai_p1_thread = Thread(target=ai1.thread_hardware_ai)
    hardware_ai_p2_thread = Thread(target=ai2.thread_hardware_ai)
    # mock_test_p1_thread = Thread(target=thread_mockP1)
    # mock_test_p2_thread = Thread(target=thread_mockP2)

    debug_thread = Thread(target=thread_debug)


    # eval_server_thread.start()
    data_server_thread.start()
    game_engine_thread.start()
    hardware_ai_p1_thread.start()
    hardware_ai_p2_thread.start()
    # mock_test_p1_thread.start()
    # mock_test_p2_thread.start()
    debug_thread.start()
    


if __name__ == "__main__":
    main()
